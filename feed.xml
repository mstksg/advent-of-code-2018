<?xml version="1.0" encoding="UTF-16"?>
<!--This file generated by build script at ./Build.hs in solutions repository-->
<rss version="2.0">
  <channel>
    <title>Justin Le's Advent of Code 2018 Reflections</title>
    <description>Reflections for my Advent of Code solutions as I try to solve them all in fun ways using Haskell!</description>
    <link>https://github.com/mstksg/advent-of-code-2018/blob/master/reflections.md</link>
    <copyright>Copyright 2018 Justin Le</copyright>
    <language>en-us</language>
    <lastBuildDate>Fri, 27 Nov 2020 22:28:43 EST</lastBuildDate>
    <managingEditor>justin@jle.im</managingEditor>
    <pubDate>Fri, 27 Nov 2020 22:28:43 EST</pubDate>
    <webMaster>justin@jle.im</webMaster>
    <generator>Shake + Template</generator>
    <item>
      <title>Day 20</title>
      <description>&lt;h2 id=&quot;day-20&quot;&gt;Day 20&lt;/h2&gt;
&lt;!--
This section is generated and compiled by the build script at ./Build.hs from
the file `./reflections/day20.md`.  If you want to edit this, edit
that file instead!
--&gt;
&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://adventofcode.com/2018/day/20&quot;&gt;Prompt&lt;/a&gt;&lt;/em&gt; / &lt;em&gt;&lt;a href=&quot;https://github.com/mstksg/advent-of-code-2018/blob/master/src/AOC/Challenge/Day20.hs&quot;&gt;Code&lt;/a&gt;&lt;/em&gt; / &lt;em&gt;&lt;a href=&quot;https://mstksg.github.io/advent-of-code-2018/src/AOC.Challenge.Day20.html&quot;&gt;Rendered&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Like Day 4, this one is made pretty simple with parser combinators! :D&lt;/p&gt;
&lt;p&gt;Just for clarity, we will tokenize the stream first – but it’s not strictly necessary.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb1&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb1-1&quot;&gt;&lt;a href=&quot;#cb1-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Dir&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;DN&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;DE&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;DS&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;DW&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-2&quot;&gt;&lt;a href=&quot;#cb1-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;deriving&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Show&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;Eq&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;Ord&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb1-3&quot;&gt;&lt;a href=&quot;#cb1-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-4&quot;&gt;&lt;a href=&quot;#cb1-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;RegTok&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;RTStart&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-5&quot;&gt;&lt;a href=&quot;#cb1-5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;op&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;RTDir&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Dir&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-6&quot;&gt;&lt;a href=&quot;#cb1-6&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;op&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;RTRParen&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-7&quot;&gt;&lt;a href=&quot;#cb1-7&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;op&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;RTOr&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-8&quot;&gt;&lt;a href=&quot;#cb1-8&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;op&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;RTLParen&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-9&quot;&gt;&lt;a href=&quot;#cb1-9&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;op&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;RTEnd&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-10&quot;&gt;&lt;a href=&quot;#cb1-10&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;deriving&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Show&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;Eq&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;Ord&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb1-11&quot;&gt;&lt;a href=&quot;#cb1-11&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-12&quot;&gt;&lt;a href=&quot;#cb1-12&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;parseToks ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; [&lt;span class=&quot;dt&quot;&gt;RegTok&lt;/span&gt;]&lt;/span&gt;
&lt;span id=&quot;cb1-13&quot;&gt;&lt;a href=&quot;#cb1-13&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;parseToks &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; mapMaybe &lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; \&lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-14&quot;&gt;&lt;a href=&quot;#cb1-14&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ch&quot;&gt;&amp;#39;^&amp;#39;&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;RTStart&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-15&quot;&gt;&lt;a href=&quot;#cb1-15&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ch&quot;&gt;&amp;#39;N&amp;#39;&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;RTDir&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;DN&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-16&quot;&gt;&lt;a href=&quot;#cb1-16&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ch&quot;&gt;&amp;#39;E&amp;#39;&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;RTDir&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;DE&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-17&quot;&gt;&lt;a href=&quot;#cb1-17&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ch&quot;&gt;&amp;#39;W&amp;#39;&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;RTDir&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;DW&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-18&quot;&gt;&lt;a href=&quot;#cb1-18&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ch&quot;&gt;&amp;#39;S&amp;#39;&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;RTDir&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;DS&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-19&quot;&gt;&lt;a href=&quot;#cb1-19&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ch&quot;&gt;&amp;#39;|&amp;#39;&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;RTOr&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-20&quot;&gt;&lt;a href=&quot;#cb1-20&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ch&quot;&gt;&amp;#39;(&amp;#39;&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;RTRParen&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-21&quot;&gt;&lt;a href=&quot;#cb1-21&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ch&quot;&gt;&amp;#39;)&amp;#39;&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;RTLParen&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-22&quot;&gt;&lt;a href=&quot;#cb1-22&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ch&quot;&gt;&amp;#39;$&amp;#39;&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;RTEnd&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-23&quot;&gt;&lt;a href=&quot;#cb1-23&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    _   &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Nothing&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, to write our parser! We will parse our &lt;code&gt;[RegTok]&lt;/code&gt; stream into a set of edges.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb2&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb2-1&quot;&gt;&lt;a href=&quot;#cb2-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt;           &lt;span class=&quot;dt&quot;&gt;Linear&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;V2&lt;/span&gt;(..))&lt;/span&gt;
&lt;span id=&quot;cb2-2&quot;&gt;&lt;a href=&quot;#cb2-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;qualified&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Text.Parsec&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;P&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-3&quot;&gt;&lt;a href=&quot;#cb2-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-4&quot;&gt;&lt;a href=&quot;#cb2-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- V2 Int = (Int, Int), essentially&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-5&quot;&gt;&lt;a href=&quot;#cb2-5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;V2&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-6&quot;&gt;&lt;a href=&quot;#cb2-6&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-7&quot;&gt;&lt;a href=&quot;#cb2-7&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Edge&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Point&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-8&quot;&gt;&lt;a href=&quot;#cb2-8&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;deriving&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Show&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;Eq&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;Ord&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb2-9&quot;&gt;&lt;a href=&quot;#cb2-9&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-10&quot;&gt;&lt;a href=&quot;#cb2-10&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- | Make an edge.  Normalizes so we can compare for uniqueness.&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-11&quot;&gt;&lt;a href=&quot;#cb2-11&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;mkEdge ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Edge&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-12&quot;&gt;&lt;a href=&quot;#cb2-12&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;mkEdge x y&lt;/span&gt;
&lt;span id=&quot;cb2-13&quot;&gt;&lt;a href=&quot;#cb2-13&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;op&quot;&gt;|&lt;/span&gt; x &lt;span class=&quot;op&quot;&gt;&amp;lt;=&lt;/span&gt; y    &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;E&lt;/span&gt; x y&lt;/span&gt;
&lt;span id=&quot;cb2-14&quot;&gt;&lt;a href=&quot;#cb2-14&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;op&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;otherwise&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;E&lt;/span&gt; y x&lt;/span&gt;
&lt;span id=&quot;cb2-15&quot;&gt;&lt;a href=&quot;#cb2-15&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-16&quot;&gt;&lt;a href=&quot;#cb2-16&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- | Parse a stream of `RegTok`.  We have a State of the &amp;quot;current point&amp;quot;.&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-17&quot;&gt;&lt;a href=&quot;#cb2-17&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;P.Parsec&lt;/span&gt; [&lt;span class=&quot;dt&quot;&gt;RegTok&lt;/span&gt;] &lt;span class=&quot;dt&quot;&gt;Point&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We either have a “normal step”, or a “branching step”. The entire way, we accumulate a set of all edges.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb3&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb3-1&quot;&gt;&lt;a href=&quot;#cb3-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;tok ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;RegTok&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Parser&lt;/span&gt; ()&lt;/span&gt;
&lt;span id=&quot;cb3-2&quot;&gt;&lt;a href=&quot;#cb3-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;tok t &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; P.try &lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; guard &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; t) &lt;span class=&quot;op&quot;&gt;=&amp;lt;&amp;lt;&lt;/span&gt; P.anyToken&lt;/span&gt;
&lt;span id=&quot;cb3-3&quot;&gt;&lt;a href=&quot;#cb3-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-4&quot;&gt;&lt;a href=&quot;#cb3-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- | `anySteps` is many normal steps or branch steps.  Each of these gives an&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-5&quot;&gt;&lt;a href=&quot;#cb3-5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- edge, so we union all of their edges together.&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-6&quot;&gt;&lt;a href=&quot;#cb3-6&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;anySteps ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Parser&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Edge&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb3-7&quot;&gt;&lt;a href=&quot;#cb3-7&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;anySteps &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; S.unions &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; P.many &lt;span class=&quot;op&quot;&gt;$&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-8&quot;&gt;&lt;a href=&quot;#cb3-8&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    P.try normalStep &lt;span class=&quot;op&quot;&gt;P.&amp;lt;|&amp;gt;&lt;/span&gt; branchStep&lt;/span&gt;
&lt;span id=&quot;cb3-9&quot;&gt;&lt;a href=&quot;#cb3-9&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-10&quot;&gt;&lt;a href=&quot;#cb3-10&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- | `normalStep` is a normal step without any branching.  It is an `RTDir`&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-11&quot;&gt;&lt;a href=&quot;#cb3-11&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- token, followed by `anySteps`.  We add the newly discovered edge to the&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-12&quot;&gt;&lt;a href=&quot;#cb3-12&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- edges in `anySteps`.&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-13&quot;&gt;&lt;a href=&quot;#cb3-13&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;normalStep ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Parser&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Edge&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb3-14&quot;&gt;&lt;a href=&quot;#cb3-14&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;normalStep &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-15&quot;&gt;&lt;a href=&quot;#cb3-15&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    currPos &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; P.getState&lt;/span&gt;
&lt;span id=&quot;cb3-16&quot;&gt;&lt;a href=&quot;#cb3-16&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;dt&quot;&gt;RTDir&lt;/span&gt; d &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; P.anyToken&lt;/span&gt;
&lt;span id=&quot;cb3-17&quot;&gt;&lt;a href=&quot;#cb3-17&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; newPos &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; currPos &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; d &lt;span class=&quot;kw&quot;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-18&quot;&gt;&lt;a href=&quot;#cb3-18&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;          &lt;span class=&quot;dt&quot;&gt;DN&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;V2&lt;/span&gt;   &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb3-19&quot;&gt;&lt;a href=&quot;#cb3-19&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;          &lt;span class=&quot;dt&quot;&gt;DE&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;V2&lt;/span&gt;   &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;   &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-20&quot;&gt;&lt;a href=&quot;#cb3-20&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;          &lt;span class=&quot;dt&quot;&gt;DS&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;V2&lt;/span&gt;   &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-21&quot;&gt;&lt;a href=&quot;#cb3-21&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;          &lt;span class=&quot;dt&quot;&gt;DW&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;V2&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)  &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-22&quot;&gt;&lt;a href=&quot;#cb3-22&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    P.setState newPos&lt;/span&gt;
&lt;span id=&quot;cb3-23&quot;&gt;&lt;a href=&quot;#cb3-23&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    S.insert (mkEdge currPos newPos) &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; anySteps&lt;/span&gt;
&lt;span id=&quot;cb3-24&quot;&gt;&lt;a href=&quot;#cb3-24&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-25&quot;&gt;&lt;a href=&quot;#cb3-25&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- | `branchStep` is many `anySteps`, each separated by an `RTOr` token.  It is&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-26&quot;&gt;&lt;a href=&quot;#cb3-26&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- located between `RTRParen` and `RTLParen`.&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-27&quot;&gt;&lt;a href=&quot;#cb3-27&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;branchStep ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Parser&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Edge&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb3-28&quot;&gt;&lt;a href=&quot;#cb3-28&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;branchStep &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; (tok &lt;span class=&quot;dt&quot;&gt;RTRParen&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;`P.between`&lt;/span&gt; tok &lt;span class=&quot;dt&quot;&gt;RTLParen&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-29&quot;&gt;&lt;a href=&quot;#cb3-29&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    initPos &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; P.getState&lt;/span&gt;
&lt;span id=&quot;cb3-30&quot;&gt;&lt;a href=&quot;#cb3-30&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; S.unions &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; (&lt;span class=&quot;ot&quot;&gt;`P.sepBy`&lt;/span&gt; tok &lt;span class=&quot;dt&quot;&gt;RTOr&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-31&quot;&gt;&lt;a href=&quot;#cb3-31&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;      P.setState initPos&lt;/span&gt;
&lt;span id=&quot;cb3-32&quot;&gt;&lt;a href=&quot;#cb3-32&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;      anySteps&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Our final regexp parser is just &lt;code&gt;anySteps&lt;/code&gt; seperated by the start and end tokens:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb4&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb4-1&quot;&gt;&lt;a href=&quot;#cb4-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;buildEdges ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Parser&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Edge&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb4-2&quot;&gt;&lt;a href=&quot;#cb4-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;buildEdges &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; (tok &lt;span class=&quot;dt&quot;&gt;RTStart&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;`P.between`&lt;/span&gt; tok &lt;span class=&quot;dt&quot;&gt;RTEnd&lt;/span&gt;) anySteps&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now that we have successfully parsed the “regexp” into a set of edges, we need to follow all of the edges into all of the rooms. We can do this using recursive descent.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb5&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb5-1&quot;&gt;&lt;a href=&quot;#cb5-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;neighbs ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; [&lt;span class=&quot;dt&quot;&gt;Point&lt;/span&gt;]&lt;/span&gt;
&lt;span id=&quot;cb5-2&quot;&gt;&lt;a href=&quot;#cb5-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;neighbs p &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; (p &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; [ &lt;span class=&quot;dt&quot;&gt;V2&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;), &lt;span class=&quot;dt&quot;&gt;V2&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;V2&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;V2&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; ]&lt;/span&gt;
&lt;span id=&quot;cb5-3&quot;&gt;&lt;a href=&quot;#cb5-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-4&quot;&gt;&lt;a href=&quot;#cb5-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-5&quot;&gt;&lt;a href=&quot;#cb5-5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;roomDistances ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Edge&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; [&lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;]&lt;/span&gt;
&lt;span id=&quot;cb5-6&quot;&gt;&lt;a href=&quot;#cb5-6&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;roomDistances es &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; go &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; S.empty (&lt;span class=&quot;dt&quot;&gt;V2&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb5-7&quot;&gt;&lt;a href=&quot;#cb5-7&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-8&quot;&gt;&lt;a href=&quot;#cb5-8&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;    go ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; [&lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;]&lt;/span&gt;
&lt;span id=&quot;cb5-9&quot;&gt;&lt;a href=&quot;#cb5-9&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    go n seen p &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; (n &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;$&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-10&quot;&gt;&lt;a href=&quot;#cb5-10&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;fu&quot;&gt;concatMap&lt;/span&gt; (go (n &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;) (S.insert p seen)) allNeighbs&lt;/span&gt;
&lt;span id=&quot;cb5-11&quot;&gt;&lt;a href=&quot;#cb5-11&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-12&quot;&gt;&lt;a href=&quot;#cb5-12&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        allNeighbs &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;filter&lt;/span&gt; ((&lt;span class=&quot;ot&quot;&gt;`S.member`&lt;/span&gt; es) &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; mkEdge p)&lt;/span&gt;
&lt;span id=&quot;cb5-13&quot;&gt;&lt;a href=&quot;#cb5-13&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;                   &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;filter&lt;/span&gt; (&lt;span class=&quot;ot&quot;&gt;`S.notMember`&lt;/span&gt; seen)&lt;/span&gt;
&lt;span id=&quot;cb5-14&quot;&gt;&lt;a href=&quot;#cb5-14&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;                   &lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; neighbs p&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We have to make sure to keep track of the “already seen” rooms. On my first attempt, I forgot to do this!&lt;/p&gt;
&lt;p&gt;Anyway, here’s Part 1 and Part 2:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb6&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb6-1&quot;&gt;&lt;a href=&quot;#cb6-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;day20a ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-2&quot;&gt;&lt;a href=&quot;#cb6-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;day20a inp &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;maximum&lt;/span&gt; (roomDistances edges)&lt;/span&gt;
&lt;span id=&quot;cb6-3&quot;&gt;&lt;a href=&quot;#cb6-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-4&quot;&gt;&lt;a href=&quot;#cb6-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;dt&quot;&gt;Right&lt;/span&gt; edges &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; P.runParser buildEdges (&lt;span class=&quot;dt&quot;&gt;V2&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;st&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-5&quot;&gt;&lt;a href=&quot;#cb6-5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;                    (parseToks inp)&lt;/span&gt;
&lt;span id=&quot;cb6-6&quot;&gt;&lt;a href=&quot;#cb6-6&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-7&quot;&gt;&lt;a href=&quot;#cb6-7&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;day20b ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-8&quot;&gt;&lt;a href=&quot;#cb6-8&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;day20b inp &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;filter&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1000&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; roomDistances edges&lt;/span&gt;
&lt;span id=&quot;cb6-9&quot;&gt;&lt;a href=&quot;#cb6-9&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-10&quot;&gt;&lt;a href=&quot;#cb6-10&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;dt&quot;&gt;Right&lt;/span&gt; edges &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; P.runParser buildEdges (&lt;span class=&quot;dt&quot;&gt;V2&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;st&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-11&quot;&gt;&lt;a href=&quot;#cb6-11&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;                    (parseToks inp)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;day-20-benchmarks&quot;&gt;Day 20 Benchmarks&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt; Day 20a
benchmarking...
time                 48.44 ms   (44.77 ms .. 54.27 ms)
                     0.962 R²   (0.880 R² .. 0.999 R²)
mean                 49.75 ms   (47.43 ms .. 53.45 ms)
std dev              5.563 ms   (2.050 ms .. 7.731 ms)
variance introduced by outliers: 44% (moderately inflated)

&amp;gt;&amp;gt; Day 20b
benchmarking...
time                 489.6 ms   (419.0 ms .. 566.6 ms)
                     0.997 R²   (0.989 R² .. 1.000 R²)
mean                 488.4 ms   (478.4 ms .. 499.7 ms)
std dev              13.00 ms   (5.349 ms .. 17.77 ms)
variance introduced by outliers: 19% (moderately inflated)&lt;/code&gt;&lt;/pre&gt;
</description>
      <link>https://github.com/mstksg/advent-of-code-2018/blob/master/reflections.md#day-20</link>
      <pubDate>Thu, 20 Dec 2018 01:00:00 EST</pubDate>
    </item>

    <item>
      <title>Day 16</title>
      <description>&lt;h2 id=&quot;day-16&quot;&gt;Day 16&lt;/h2&gt;
&lt;!--
This section is generated and compiled by the build script at ./Build.hs from
the file `./reflections/day16.md`.  If you want to edit this, edit
that file instead!
--&gt;
&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://adventofcode.com/2018/day/16&quot;&gt;Prompt&lt;/a&gt;&lt;/em&gt; / &lt;em&gt;&lt;a href=&quot;https://github.com/mstksg/advent-of-code-2018/blob/master/src/AOC/Challenge/Day16.hs&quot;&gt;Code&lt;/a&gt;&lt;/em&gt; / &lt;em&gt;&lt;a href=&quot;https://mstksg.github.io/advent-of-code-2018/src/AOC.Challenge.Day16.html&quot;&gt;Rendered&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Today was fun because I got to re-use some techniques I discussed in a blog post I’ve written in the past: &lt;a href=&quot;https://blog.jle.im/entry/unique-sample-drawing-searches-with-list-and-statet.html&quot;&gt;Send More Money: List and StateT&lt;/a&gt;. I talk about using &lt;code&gt;StateT&lt;/code&gt; over &lt;code&gt;[]&lt;/code&gt; to do implement prolog-inspired constraint satisfaction searches while taking advantage of laziness.&lt;/p&gt;
&lt;p&gt;First of all, our types. I’ll be using the &lt;em&gt;&lt;a href=&quot;https://hackage.haskell.org/package/vector-sized&quot;&gt;vector-sized&lt;/a&gt;&lt;/em&gt; library with &lt;em&gt;&lt;a href=&quot;https://hackage.haskell.org/package/finite-typelits&quot;&gt;finite-typelits&lt;/a&gt;&lt;/em&gt; to help us do safe indexing. A &lt;code&gt;Vector n a&lt;/code&gt; is a vector of &lt;code&gt;n&lt;/code&gt; &lt;code&gt;a&lt;/code&gt;s, and a &lt;code&gt;Finite n&lt;/code&gt; is a legal index into such a vector. For example, a &lt;code&gt;Vector 4 Int&lt;/code&gt; is a vector of 4 &lt;code&gt;Int&lt;/code&gt;s, and &lt;code&gt;Finite 4&lt;/code&gt; is 0, 1, 2, or 3.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb1&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb1-1&quot;&gt;&lt;a href=&quot;#cb1-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt;           &lt;span class=&quot;dt&quot;&gt;Data.Vector.Sized&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Vector&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb1-2&quot;&gt;&lt;a href=&quot;#cb1-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt;           &lt;span class=&quot;dt&quot;&gt;Data.Finite&lt;/span&gt;       (&lt;span class=&quot;dt&quot;&gt;Finite&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb1-3&quot;&gt;&lt;a href=&quot;#cb1-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-4&quot;&gt;&lt;a href=&quot;#cb1-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Reg&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Vector&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-5&quot;&gt;&lt;a href=&quot;#cb1-5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-6&quot;&gt;&lt;a href=&quot;#cb1-6&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Instr&lt;/span&gt; a &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;I&lt;/span&gt; {&lt;span class=&quot;ot&quot;&gt; _iOp  ::&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&quot;cb1-7&quot;&gt;&lt;a href=&quot;#cb1-7&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;                 ,&lt;span class=&quot;ot&quot;&gt; _iInA ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Finite&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-8&quot;&gt;&lt;a href=&quot;#cb1-8&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;                 ,&lt;span class=&quot;ot&quot;&gt; _iInB ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Finite&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-9&quot;&gt;&lt;a href=&quot;#cb1-9&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;                 ,&lt;span class=&quot;ot&quot;&gt; _iOut ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Finite&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-10&quot;&gt;&lt;a href=&quot;#cb1-10&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;                 }&lt;/span&gt;
&lt;span id=&quot;cb1-11&quot;&gt;&lt;a href=&quot;#cb1-11&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;deriving&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Show&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;Functor&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb1-12&quot;&gt;&lt;a href=&quot;#cb1-12&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-13&quot;&gt;&lt;a href=&quot;#cb1-13&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Trial&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;T&lt;/span&gt; {&lt;span class=&quot;ot&quot;&gt; _tBefore ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Reg&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-14&quot;&gt;&lt;a href=&quot;#cb1-14&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;               ,&lt;span class=&quot;ot&quot;&gt; _tInstr  ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Instr&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Finite&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;16&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb1-15&quot;&gt;&lt;a href=&quot;#cb1-15&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;               ,&lt;span class=&quot;ot&quot;&gt; _tAfter  ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Reg&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-16&quot;&gt;&lt;a href=&quot;#cb1-16&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;               }&lt;/span&gt;
&lt;span id=&quot;cb1-17&quot;&gt;&lt;a href=&quot;#cb1-17&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;deriving&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Show&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-18&quot;&gt;&lt;a href=&quot;#cb1-18&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-19&quot;&gt;&lt;a href=&quot;#cb1-19&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;OpCode&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;OAddR&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;OAddI&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-20&quot;&gt;&lt;a href=&quot;#cb1-20&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;op&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;OMulR&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;OMulI&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-21&quot;&gt;&lt;a href=&quot;#cb1-21&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;op&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;OBanR&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;OBanI&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-22&quot;&gt;&lt;a href=&quot;#cb1-22&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;op&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;OBorR&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;OBorI&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-23&quot;&gt;&lt;a href=&quot;#cb1-23&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;op&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;OSetR&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;OSetI&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-24&quot;&gt;&lt;a href=&quot;#cb1-24&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;op&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;OGtIR&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;OGtRI&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;OGtRR&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-25&quot;&gt;&lt;a href=&quot;#cb1-25&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;op&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;OEqIR&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;OEqRI&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;OEqRR&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-26&quot;&gt;&lt;a href=&quot;#cb1-26&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;deriving&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Show&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;Eq&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;Ord&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;Enum&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;Bounded&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can leave &lt;code&gt;Instr&lt;/code&gt; parameterized over the opcode type so that we can use it with &lt;code&gt;Finite 16&lt;/code&gt; initially, and &lt;code&gt;OpCode&lt;/code&gt; later.&lt;/p&gt;
&lt;p&gt;We do need to implement the functionality of each op, which we can do by pattern matching on an &lt;code&gt;OpCode&lt;/code&gt;. We use some lens functionality to simplify some of the editing of indices, but we could also just manually modify indices.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb2&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb2-1&quot;&gt;&lt;a href=&quot;#cb2-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;runOp ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Instr&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;OpCode&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Reg&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Reg&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-2&quot;&gt;&lt;a href=&quot;#cb2-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;runOp &lt;span class=&quot;dt&quot;&gt;I&lt;/span&gt;{&lt;span class=&quot;op&quot;&gt;..&lt;/span&gt;} &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; _iOp &lt;span class=&quot;kw&quot;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-3&quot;&gt;&lt;a href=&quot;#cb2-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;dt&quot;&gt;OAddR&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; \r &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; r &lt;span class=&quot;op&quot;&gt;&amp;amp;&lt;/span&gt; V.ix _iOut &lt;span class=&quot;op&quot;&gt;.~&lt;/span&gt; r &lt;span class=&quot;op&quot;&gt;^.&lt;/span&gt; V.ix _iInA  &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;  r &lt;span class=&quot;op&quot;&gt;^.&lt;/span&gt; V.ix _iInB&lt;/span&gt;
&lt;span id=&quot;cb2-4&quot;&gt;&lt;a href=&quot;#cb2-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;dt&quot;&gt;OAddI&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; \r &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; r &lt;span class=&quot;op&quot;&gt;&amp;amp;&lt;/span&gt; V.ix _iOut &lt;span class=&quot;op&quot;&gt;.~&lt;/span&gt; r &lt;span class=&quot;op&quot;&gt;^.&lt;/span&gt; V.ix _iInA  &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;  &lt;span class=&quot;fu&quot;&gt;fromIntegral&lt;/span&gt; _iInB&lt;/span&gt;
&lt;span id=&quot;cb2-5&quot;&gt;&lt;a href=&quot;#cb2-5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;dt&quot;&gt;OMulR&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; \r &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; r &lt;span class=&quot;op&quot;&gt;&amp;amp;&lt;/span&gt; V.ix _iOut &lt;span class=&quot;op&quot;&gt;.~&lt;/span&gt; r &lt;span class=&quot;op&quot;&gt;^.&lt;/span&gt; V.ix _iInA  &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;  r &lt;span class=&quot;op&quot;&gt;^.&lt;/span&gt; V.ix _iInB&lt;/span&gt;
&lt;span id=&quot;cb2-6&quot;&gt;&lt;a href=&quot;#cb2-6&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;dt&quot;&gt;OMulI&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; \r &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; r &lt;span class=&quot;op&quot;&gt;&amp;amp;&lt;/span&gt; V.ix _iOut &lt;span class=&quot;op&quot;&gt;.~&lt;/span&gt; r &lt;span class=&quot;op&quot;&gt;^.&lt;/span&gt; V.ix _iInA  &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;  &lt;span class=&quot;fu&quot;&gt;fromIntegral&lt;/span&gt; _iInB&lt;/span&gt;
&lt;span id=&quot;cb2-7&quot;&gt;&lt;a href=&quot;#cb2-7&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;dt&quot;&gt;OBanR&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; \r &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; r &lt;span class=&quot;op&quot;&gt;&amp;amp;&lt;/span&gt; V.ix _iOut &lt;span class=&quot;op&quot;&gt;.~&lt;/span&gt; r &lt;span class=&quot;op&quot;&gt;^.&lt;/span&gt; V.ix _iInA &lt;span class=&quot;op&quot;&gt;.&amp;amp;.&lt;/span&gt; r &lt;span class=&quot;op&quot;&gt;^.&lt;/span&gt; V.ix _iInB&lt;/span&gt;
&lt;span id=&quot;cb2-8&quot;&gt;&lt;a href=&quot;#cb2-8&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;dt&quot;&gt;OBanI&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; \r &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; r &lt;span class=&quot;op&quot;&gt;&amp;amp;&lt;/span&gt; V.ix _iOut &lt;span class=&quot;op&quot;&gt;.~&lt;/span&gt; r &lt;span class=&quot;op&quot;&gt;^.&lt;/span&gt; V.ix _iInA &lt;span class=&quot;op&quot;&gt;.&amp;amp;.&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fromIntegral&lt;/span&gt; _iInB&lt;/span&gt;
&lt;span id=&quot;cb2-9&quot;&gt;&lt;a href=&quot;#cb2-9&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;dt&quot;&gt;OBorR&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; \r &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; r &lt;span class=&quot;op&quot;&gt;&amp;amp;&lt;/span&gt; V.ix _iOut &lt;span class=&quot;op&quot;&gt;.~&lt;/span&gt; r &lt;span class=&quot;op&quot;&gt;^.&lt;/span&gt; V.ix _iInA &lt;span class=&quot;op&quot;&gt;.|.&lt;/span&gt; r &lt;span class=&quot;op&quot;&gt;^.&lt;/span&gt; V.ix _iInB&lt;/span&gt;
&lt;span id=&quot;cb2-10&quot;&gt;&lt;a href=&quot;#cb2-10&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;dt&quot;&gt;OBorI&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; \r &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; r &lt;span class=&quot;op&quot;&gt;&amp;amp;&lt;/span&gt; V.ix _iOut &lt;span class=&quot;op&quot;&gt;.~&lt;/span&gt; r &lt;span class=&quot;op&quot;&gt;^.&lt;/span&gt; V.ix _iInA &lt;span class=&quot;op&quot;&gt;.|.&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fromIntegral&lt;/span&gt; _iInB&lt;/span&gt;
&lt;span id=&quot;cb2-11&quot;&gt;&lt;a href=&quot;#cb2-11&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;dt&quot;&gt;OSetR&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; \r &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; r &lt;span class=&quot;op&quot;&gt;&amp;amp;&lt;/span&gt; V.ix _iOut &lt;span class=&quot;op&quot;&gt;.~&lt;/span&gt; r &lt;span class=&quot;op&quot;&gt;^.&lt;/span&gt; V.ix _iInA&lt;/span&gt;
&lt;span id=&quot;cb2-12&quot;&gt;&lt;a href=&quot;#cb2-12&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;dt&quot;&gt;OSetI&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; \r &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; r &lt;span class=&quot;op&quot;&gt;&amp;amp;&lt;/span&gt; V.ix _iOut &lt;span class=&quot;op&quot;&gt;.~&lt;/span&gt;                     &lt;span class=&quot;fu&quot;&gt;fromIntegral&lt;/span&gt; _iInA&lt;/span&gt;
&lt;span id=&quot;cb2-13&quot;&gt;&lt;a href=&quot;#cb2-13&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;dt&quot;&gt;OGtIR&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; \r &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; r &lt;span class=&quot;op&quot;&gt;&amp;amp;&lt;/span&gt; V.ix _iOut &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; enum &lt;span class=&quot;op&quot;&gt;.~&lt;/span&gt; (&lt;span class=&quot;fu&quot;&gt;fromIntegral&lt;/span&gt; _iInA  &lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; r &lt;span class=&quot;op&quot;&gt;^.&lt;/span&gt; V.ix _iInB   )&lt;/span&gt;
&lt;span id=&quot;cb2-14&quot;&gt;&lt;a href=&quot;#cb2-14&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;dt&quot;&gt;OGtRI&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; \r &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; r &lt;span class=&quot;op&quot;&gt;&amp;amp;&lt;/span&gt; V.ix _iOut &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; enum &lt;span class=&quot;op&quot;&gt;.~&lt;/span&gt; (r &lt;span class=&quot;op&quot;&gt;^.&lt;/span&gt; V.ix _iInA     &lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fromIntegral&lt;/span&gt; _iInB)&lt;/span&gt;
&lt;span id=&quot;cb2-15&quot;&gt;&lt;a href=&quot;#cb2-15&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;dt&quot;&gt;OGtRR&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; \r &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; r &lt;span class=&quot;op&quot;&gt;&amp;amp;&lt;/span&gt; V.ix _iOut &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; enum &lt;span class=&quot;op&quot;&gt;.~&lt;/span&gt; (r &lt;span class=&quot;op&quot;&gt;^.&lt;/span&gt; V.ix _iInA     &lt;span class=&quot;op&quot;&gt;&amp;gt;&lt;/span&gt; r &lt;span class=&quot;op&quot;&gt;^.&lt;/span&gt; V.ix _iInB   )&lt;/span&gt;
&lt;span id=&quot;cb2-16&quot;&gt;&lt;a href=&quot;#cb2-16&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;dt&quot;&gt;OEqIR&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; \r &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; r &lt;span class=&quot;op&quot;&gt;&amp;amp;&lt;/span&gt; V.ix _iOut &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; enum &lt;span class=&quot;op&quot;&gt;.~&lt;/span&gt; (&lt;span class=&quot;fu&quot;&gt;fromIntegral&lt;/span&gt; _iInA &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; r &lt;span class=&quot;op&quot;&gt;^.&lt;/span&gt; V.ix _iInB   )&lt;/span&gt;
&lt;span id=&quot;cb2-17&quot;&gt;&lt;a href=&quot;#cb2-17&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;dt&quot;&gt;OEqRI&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; \r &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; r &lt;span class=&quot;op&quot;&gt;&amp;amp;&lt;/span&gt; V.ix _iOut &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; enum &lt;span class=&quot;op&quot;&gt;.~&lt;/span&gt; (r &lt;span class=&quot;op&quot;&gt;^.&lt;/span&gt; V.ix _iInA    &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fromIntegral&lt;/span&gt; _iInB)&lt;/span&gt;
&lt;span id=&quot;cb2-18&quot;&gt;&lt;a href=&quot;#cb2-18&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;dt&quot;&gt;OEqRR&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; \r &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; r &lt;span class=&quot;op&quot;&gt;&amp;amp;&lt;/span&gt; V.ix _iOut &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; enum &lt;span class=&quot;op&quot;&gt;.~&lt;/span&gt; (r &lt;span class=&quot;op&quot;&gt;^.&lt;/span&gt; V.ix _iInA    &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; r &lt;span class=&quot;op&quot;&gt;^.&lt;/span&gt; V.ix _iInB   )&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, from a &lt;code&gt;Trial&lt;/code&gt;, we can get a set of &lt;code&gt;OpCode&lt;/code&gt;s that are plausible candidates if the output matches the expected output for a given &lt;code&gt;OpCode&lt;/code&gt;, for the given input.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb3&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb3-1&quot;&gt;&lt;a href=&quot;#cb3-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;plausible ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Trial&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;OpCode&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-2&quot;&gt;&lt;a href=&quot;#cb3-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;plausible &lt;span class=&quot;dt&quot;&gt;T&lt;/span&gt;{&lt;span class=&quot;op&quot;&gt;..&lt;/span&gt;} &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; S.fromList (&lt;span class=&quot;fu&quot;&gt;filter&lt;/span&gt; tryTrial [&lt;span class=&quot;dt&quot;&gt;OAddR&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;..&lt;/span&gt;])&lt;/span&gt;
&lt;span id=&quot;cb3-3&quot;&gt;&lt;a href=&quot;#cb3-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-4&quot;&gt;&lt;a href=&quot;#cb3-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;    tryTrial ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;OpCode&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Bool&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-5&quot;&gt;&lt;a href=&quot;#cb3-5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    tryTrial o &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; runOp (_tInstr { _iOp &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; o }) _tBefore &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; _tAfter&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Part 1 is, then, just counting the trials with three or more plausible candidates:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb4&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb4-1&quot;&gt;&lt;a href=&quot;#cb4-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;day16a ::&lt;/span&gt; [&lt;span class=&quot;dt&quot;&gt;Trial&lt;/span&gt;] &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb4-2&quot;&gt;&lt;a href=&quot;#cb4-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;day16a &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;filter&lt;/span&gt; ((&lt;span class=&quot;op&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; S.size &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; plausible)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Part 2 is where we can implement our constraint satisfaction search. Following &lt;a href=&quot;https://blog.jle.im/entry/unique-sample-drawing-searches-with-list-and-statet.html&quot;&gt;this blog post&lt;/a&gt;, we can write a search using &lt;code&gt;StateT (Set OpCode) []&lt;/code&gt;. Our state will be the &lt;code&gt;OpCode&lt;/code&gt;s that we have already used. We fill up a vector step-by-step, by picking only &lt;code&gt;OpCode&lt;/code&gt;s that have not been used yet:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb5&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb5-1&quot;&gt;&lt;a href=&quot;#cb5-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;fillIn ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;OpCode&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;StateT&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;OpCode&lt;/span&gt;) [] &lt;span class=&quot;dt&quot;&gt;OpCode&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-2&quot;&gt;&lt;a href=&quot;#cb5-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;fillIn candidates &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-3&quot;&gt;&lt;a href=&quot;#cb5-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    unseen &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; gets (candidates &lt;span class=&quot;ot&quot;&gt;`S.difference`&lt;/span&gt;)  &lt;span class=&quot;co&quot;&gt;-- filter only unseen candidates&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-4&quot;&gt;&lt;a href=&quot;#cb5-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    pick   &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; lift &lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; toList unseen              &lt;span class=&quot;co&quot;&gt;-- branch on all unseen candidates&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-5&quot;&gt;&lt;a href=&quot;#cb5-5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    modify &lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; S.insert pick                      &lt;span class=&quot;co&quot;&gt;-- in this branch, &amp;#39;pick&amp;#39; is seen&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-6&quot;&gt;&lt;a href=&quot;#cb5-6&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; pick                                   &lt;span class=&quot;co&quot;&gt;-- return our pick for the branch&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, if we have a map of &lt;code&gt;Finite 16&lt;/code&gt; (op code numbers) to their candidates (a &lt;code&gt;Map (Finite 16) (Set OpCode)&lt;/code&gt;), we can populate all legal configurations. We’ll use &lt;code&gt;Vector 16 OpCode&lt;/code&gt; to represent our configuration: &lt;code&gt;0&lt;/code&gt; will represent the first item, &lt;code&gt;1&lt;/code&gt; will represent the second, etc. We can use &lt;code&gt;V.generate :: (Finite n -&amp;gt; m a) -&amp;gt; m (Vector n a)&lt;/code&gt;, and run our &lt;code&gt;fillIn&lt;/code&gt; action for every &lt;code&gt;Finite n&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb6&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb6-1&quot;&gt;&lt;a href=&quot;#cb6-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;fillVector&lt;/span&gt;
&lt;span id=&quot;cb6-2&quot;&gt;&lt;a href=&quot;#cb6-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;    ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Map&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Finite&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;16&lt;/span&gt;) (&lt;span class=&quot;dt&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;OpCode&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb6-3&quot;&gt;&lt;a href=&quot;#cb6-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;StateT&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;OpCode&lt;/span&gt;) [] (&lt;span class=&quot;dt&quot;&gt;Vector&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;16&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;OpCode&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb6-4&quot;&gt;&lt;a href=&quot;#cb6-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;fillVector candmap &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; V.generateM &lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; \i &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-5&quot;&gt;&lt;a href=&quot;#cb6-5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt; cands &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; M.lookup i candmap&lt;/span&gt;
&lt;span id=&quot;cb6-6&quot;&gt;&lt;a href=&quot;#cb6-6&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    fillIn cands&lt;/span&gt;
&lt;span id=&quot;cb6-7&quot;&gt;&lt;a href=&quot;#cb6-7&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-8&quot;&gt;&lt;a href=&quot;#cb6-8&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;fromClues&lt;/span&gt;
&lt;span id=&quot;cb6-9&quot;&gt;&lt;a href=&quot;#cb6-9&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;    ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Map&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Finite&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;16&lt;/span&gt;) (&lt;span class=&quot;dt&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;OpCode&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb6-10&quot;&gt;&lt;a href=&quot;#cb6-10&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Maybe&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Vector&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;16&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;OpCode&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb6-11&quot;&gt;&lt;a href=&quot;#cb6-11&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;fromClues m &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; listToMaybe &lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; evalStateT (fillVector m) S.empty&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If this part is confusing, the &lt;a href=&quot;https://blog.jle.im/entry/unique-sample-drawing-searches-with-list-and-statet.html&quot;&gt;blog post&lt;/a&gt; explains how &lt;code&gt;StateT&lt;/code&gt; and &lt;code&gt;[]&lt;/code&gt;, together, give you this short-circuting search behavior!&lt;/p&gt;
&lt;p&gt;So our Part 2 is using &lt;code&gt;fromClues&lt;/code&gt; from all of the candidates (making sure to do a set intersection if we get more than one clue for an opcode number), and a &lt;code&gt;foldl&#39;&lt;/code&gt; over our instruction list:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb7&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb7-1&quot;&gt;&lt;a href=&quot;#cb7-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;day16b ::&lt;/span&gt; [&lt;span class=&quot;dt&quot;&gt;Trial&lt;/span&gt;] &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; [&lt;span class=&quot;dt&quot;&gt;Instr&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Finite&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;16&lt;/span&gt;)] &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-2&quot;&gt;&lt;a href=&quot;#cb7-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;day16b ts &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; V.head &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; foldl&amp;#39; step (V.replicate &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb7-3&quot;&gt;&lt;a href=&quot;#cb7-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-4&quot;&gt;&lt;a href=&quot;#cb7-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    candmap    &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; M.fromListWith S.intersection&lt;/span&gt;
&lt;span id=&quot;cb7-5&quot;&gt;&lt;a href=&quot;#cb7-5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;               &lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; [ (_iOp (_tInstr t), plausible t)&lt;/span&gt;
&lt;span id=&quot;cb7-6&quot;&gt;&lt;a href=&quot;#cb7-6&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;                 &lt;span class=&quot;op&quot;&gt;|&lt;/span&gt; t &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; ts&lt;/span&gt;
&lt;span id=&quot;cb7-7&quot;&gt;&lt;a href=&quot;#cb7-7&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;                 ]&lt;/span&gt;
&lt;span id=&quot;cb7-8&quot;&gt;&lt;a href=&quot;#cb7-8&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt; opMap &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; fromClues candmap&lt;/span&gt;
&lt;span id=&quot;cb7-9&quot;&gt;&lt;a href=&quot;#cb7-9&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    step r i &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; runOp i&amp;#39; r&lt;/span&gt;
&lt;span id=&quot;cb7-10&quot;&gt;&lt;a href=&quot;#cb7-10&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-11&quot;&gt;&lt;a href=&quot;#cb7-11&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        i&amp;#39; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; (opMap &lt;span class=&quot;ot&quot;&gt;`V.index`&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; i&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;day-16-benchmarks&quot;&gt;Day 16 Benchmarks&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt; Day 16a
benchmarking...
time                 9.585 ms   (9.225 ms .. 9.969 ms)
                     0.984 R²   (0.968 R² .. 0.996 R²)
mean                 9.555 ms   (9.385 ms .. 9.909 ms)
std dev              624.8 μs   (404.7 μs .. 974.3 μs)
variance introduced by outliers: 34% (moderately inflated)

&amp;gt;&amp;gt; Day 16b
benchmarking...
time                 300.0 ms   (275.3 ms .. 322.4 ms)
                     0.998 R²   (0.995 R² .. 1.000 R²)
mean                 314.2 ms   (305.1 ms .. 323.9 ms)
std dev              12.42 ms   (8.090 ms .. 15.01 ms)
variance introduced by outliers: 16% (moderately inflated)&lt;/code&gt;&lt;/pre&gt;
</description>
      <link>https://github.com/mstksg/advent-of-code-2018/blob/master/reflections.md#day-16</link>
      <pubDate>Sun, 16 Dec 2018 01:00:00 EST</pubDate>
    </item>

    <item>
      <title>Day 15</title>
      <description>&lt;h2 id=&quot;day-15&quot;&gt;Day 15&lt;/h2&gt;
&lt;!--
This section is generated and compiled by the build script at ./Build.hs from
the file `./reflections/day15.md`.  If you want to edit this, edit
that file instead!
--&gt;
&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://adventofcode.com/2018/day/15&quot;&gt;Prompt&lt;/a&gt;&lt;/em&gt; / &lt;em&gt;&lt;a href=&quot;https://github.com/mstksg/advent-of-code-2018/blob/master/src/AOC/Challenge/Day15.hs&quot;&gt;Code&lt;/a&gt;&lt;/em&gt; / &lt;em&gt;&lt;a href=&quot;https://mstksg.github.io/advent-of-code-2018/src/AOC.Challenge.Day15.html&quot;&gt;Rendered&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This one feels complex at first (a generate-check-generate-check loop)…if you take a generate-check loop, you also have to be sure to make sure you check the case of 1 or 2 added digits.&lt;/p&gt;
&lt;p&gt;However, it becomes much simpler if you separate the act of generation and checking as two different things. Luckily, with Haskell, this is fairly easy with lazily linked lists.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb1&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb1-1&quot;&gt;&lt;a href=&quot;#cb1-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;chocolatePractice ::&lt;/span&gt; [&lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;]&lt;/span&gt;
&lt;span id=&quot;cb1-2&quot;&gt;&lt;a href=&quot;#cb1-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;chocolatePractice &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; go &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; (Seq.fromList [&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;7&lt;/span&gt;])&lt;/span&gt;
&lt;span id=&quot;cb1-3&quot;&gt;&lt;a href=&quot;#cb1-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-4&quot;&gt;&lt;a href=&quot;#cb1-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    go &lt;span class=&quot;op&quot;&gt;!&lt;/span&gt;p1 &lt;span class=&quot;op&quot;&gt;!&lt;/span&gt;p2 &lt;span class=&quot;op&quot;&gt;!&lt;/span&gt;tp &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; newDigits &lt;span class=&quot;op&quot;&gt;++&lt;/span&gt; go p1&amp;#39; p2&amp;#39; tp&amp;#39;&lt;/span&gt;
&lt;span id=&quot;cb1-5&quot;&gt;&lt;a href=&quot;#cb1-5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-6&quot;&gt;&lt;a href=&quot;#cb1-6&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        sc1 &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; tp &lt;span class=&quot;ot&quot;&gt;`Seq.index`&lt;/span&gt; p1&lt;/span&gt;
&lt;span id=&quot;cb1-7&quot;&gt;&lt;a href=&quot;#cb1-7&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        sc2 &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; tp &lt;span class=&quot;ot&quot;&gt;`Seq.index`&lt;/span&gt; p2&lt;/span&gt;
&lt;span id=&quot;cb1-8&quot;&gt;&lt;a href=&quot;#cb1-8&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        newDigits &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; digitize &lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; sc1 &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; sc2&lt;/span&gt;
&lt;span id=&quot;cb1-9&quot;&gt;&lt;a href=&quot;#cb1-9&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        tp&amp;#39; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; tp &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; Seq.fromList newDigits&lt;/span&gt;
&lt;span id=&quot;cb1-10&quot;&gt;&lt;a href=&quot;#cb1-10&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        p1&amp;#39; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; (p1 &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; sc1 &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;ot&quot;&gt;`mod`&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;length&lt;/span&gt; tp&amp;#39;&lt;/span&gt;
&lt;span id=&quot;cb1-11&quot;&gt;&lt;a href=&quot;#cb1-11&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        p2&amp;#39; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; (p2 &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; sc2 &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;ot&quot;&gt;`mod`&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;length&lt;/span&gt; tp&amp;#39;&lt;/span&gt;
&lt;span id=&quot;cb1-12&quot;&gt;&lt;a href=&quot;#cb1-12&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-13&quot;&gt;&lt;a href=&quot;#cb1-13&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;digitize ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; [&lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;]&lt;/span&gt;
&lt;span id=&quot;cb1-14&quot;&gt;&lt;a href=&quot;#cb1-14&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;digitize ((&lt;span class=&quot;ot&quot;&gt;`divMod`&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;)&lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt;(x,y))&lt;/span&gt;
&lt;span id=&quot;cb1-15&quot;&gt;&lt;a href=&quot;#cb1-15&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;op&quot;&gt;|&lt;/span&gt; x &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;    &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; [y]&lt;/span&gt;
&lt;span id=&quot;cb1-16&quot;&gt;&lt;a href=&quot;#cb1-16&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;op&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;otherwise&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; [x,y]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We use &lt;code&gt;go&lt;/code&gt; to lazily generate new items as they are demanded. Once the user consumes all of the &lt;code&gt;newDigits&lt;/code&gt; asks for more, &lt;code&gt;go&lt;/code&gt; will be asked to generate new digits. The important thing is that this is demand-driven.&lt;/p&gt;
&lt;p&gt;We keep track of the current tape using &lt;code&gt;Seq&lt;/code&gt; from &lt;em&gt;Data.Sequence&lt;/em&gt; for its O(1) appends and O(log) indexing – the two things we do the most. We could also get away with pre-allocation with vectors for amortized O(1) suffix appends and O(1) indexing, as well.&lt;/p&gt;
&lt;p&gt;Note that &lt;code&gt;chocolatePractice&lt;/code&gt; is effectively the same for every per-user input data. It’s just a (lazily generated) list of all of the chocolate practice digits.&lt;/p&gt;
&lt;p&gt;Part 1 then is just a &lt;code&gt;drop&lt;/code&gt; then a &lt;code&gt;take&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb2&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb2-1&quot;&gt;&lt;a href=&quot;#cb2-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;day14a ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; [&lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;]&lt;/span&gt;
&lt;span id=&quot;cb2-2&quot;&gt;&lt;a href=&quot;#cb2-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;day14a n &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;take&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt; (&lt;span class=&quot;fu&quot;&gt;drop&lt;/span&gt; n chocolatePractice)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Part 2, we can use &lt;code&gt;isPrefixOf&lt;/code&gt; from &lt;em&gt;Data.List&lt;/em&gt; and check every &lt;code&gt;tails&lt;/code&gt; until we get one that &lt;em&gt;does&lt;/em&gt; have our digit list as a prefix:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb3&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb3-1&quot;&gt;&lt;a href=&quot;#cb3-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;substrLoc ::&lt;/span&gt; [&lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;] &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; [&lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;] &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Maybe&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-2&quot;&gt;&lt;a href=&quot;#cb3-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;substrLoc xs &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;length&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-3&quot;&gt;&lt;a href=&quot;#cb3-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;             &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;takeWhile&lt;/span&gt; (&lt;span class=&quot;fu&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; (xs &lt;span class=&quot;ot&quot;&gt;`isPrefixOf`&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&quot;cb3-4&quot;&gt;&lt;a href=&quot;#cb3-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;             &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; tails&lt;/span&gt;
&lt;span id=&quot;cb3-5&quot;&gt;&lt;a href=&quot;#cb3-5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-6&quot;&gt;&lt;a href=&quot;#cb3-6&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;day14b ::&lt;/span&gt; [&lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;] &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; [&lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;]&lt;/span&gt;
&lt;span id=&quot;cb3-7&quot;&gt;&lt;a href=&quot;#cb3-7&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;day14b xs &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; xs &lt;span class=&quot;ot&quot;&gt;`substrLoc`&lt;/span&gt; cholcatePractice&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that &lt;code&gt;chocolatePractice&lt;/code&gt; is essentially just a futumorphism, so this whole thing can be stated in terms of a chronomorphism. I don’t know if there would be any advantage in doing so. But it’s interesting to me that I solved Day 13 using a hylomorphism, and now Day 14 using what is essentially a chronomorphism … so maybe recursion-schemes is the killer app for Advent of Code? :)&lt;/p&gt;
&lt;p&gt;A note on benchmarks – it’s very difficult to benchmark Day 14, because I couldn’t get ghc to stop memoizing &lt;code&gt;chocolatePractice&lt;/code&gt;. This means my repeated benchmarks kept on re-using the stored list.&lt;/p&gt;
&lt;p&gt;However, using &lt;code&gt;time&lt;/code&gt;, I timed Part 1 to about 180ms, and Part 2 to 10s.&lt;/p&gt;
&lt;h3 id=&quot;day-15-benchmarks&quot;&gt;Day 15 Benchmarks&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt; Day 15a
benchmarking...
time                 4.564 s    (4.276 s .. 4.808 s)
                     1.000 R²   (0.998 R² .. 1.000 R²)
mean                 4.560 s    (4.509 s .. 4.630 s)
std dev              68.16 ms   (25.90 ms .. 90.81 ms)
variance introduced by outliers: 19% (moderately inflated)

&amp;gt;&amp;gt; Day 15b
benchmarking...
time                 23.73 s    (23.39 s .. 23.87 s)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 23.66 s    (23.58 s .. 23.71 s)
std dev              75.10 ms   (3.886 ms .. 94.13 ms)
variance introduced by outliers: 19% (moderately inflated)&lt;/code&gt;&lt;/pre&gt;
</description>
      <link>https://github.com/mstksg/advent-of-code-2018/blob/master/reflections.md#day-15</link>
      <pubDate>Sat, 15 Dec 2018 01:00:00 EST</pubDate>
    </item>

    <item>
      <title>Day 13</title>
      <description>&lt;h2 id=&quot;day-13&quot;&gt;Day 13&lt;/h2&gt;
&lt;!--
This section is generated and compiled by the build script at ./Build.hs from
the file `./reflections/day13.md`.  If you want to edit this, edit
that file instead!
--&gt;
&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://adventofcode.com/2018/day/13&quot;&gt;Prompt&lt;/a&gt;&lt;/em&gt; / &lt;em&gt;&lt;a href=&quot;https://github.com/mstksg/advent-of-code-2018/blob/master/src/AOC/Challenge/Day13.hs&quot;&gt;Code&lt;/a&gt;&lt;/em&gt; / &lt;em&gt;&lt;a href=&quot;https://mstksg.github.io/advent-of-code-2018/src/AOC.Challenge.Day13.html&quot;&gt;Rendered&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Day 13 is fun because it can be stated in terms of a &lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Hylomorphism_(computer_science)&quot;&gt;hylomorphism&lt;/a&gt;&lt;/em&gt;!&lt;/p&gt;
&lt;p&gt;First, our data types:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb1&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb1-1&quot;&gt;&lt;a href=&quot;#cb1-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;V2&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-2&quot;&gt;&lt;a href=&quot;#cb1-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-3&quot;&gt;&lt;a href=&quot;#cb1-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Turn&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;TurnNW&lt;/span&gt;      &lt;span class=&quot;co&quot;&gt;-- ^ a forward-slash mirror @/@&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-4&quot;&gt;&lt;a href=&quot;#cb1-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;          &lt;span class=&quot;op&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;TurnNE&lt;/span&gt;      &lt;span class=&quot;co&quot;&gt;-- ^ a backwards-slash mirror @\\@&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-5&quot;&gt;&lt;a href=&quot;#cb1-5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;          &lt;span class=&quot;op&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;TurnInter&lt;/span&gt;   &lt;span class=&quot;co&quot;&gt;-- ^ a four-way intersection&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-6&quot;&gt;&lt;a href=&quot;#cb1-6&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;deriving&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Eq&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;Show&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;Ord&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb1-7&quot;&gt;&lt;a href=&quot;#cb1-7&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-8&quot;&gt;&lt;a href=&quot;#cb1-8&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Dir&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;DN&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;DE&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;DS&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;DW&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-9&quot;&gt;&lt;a href=&quot;#cb1-9&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;deriving&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Eq&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;Show&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;Ord&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;Enum&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;Bounded&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb1-10&quot;&gt;&lt;a href=&quot;#cb1-10&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-11&quot;&gt;&lt;a href=&quot;#cb1-11&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Cart&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;C&lt;/span&gt; {&lt;span class=&quot;ot&quot;&gt; _cDir   ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Dir&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-12&quot;&gt;&lt;a href=&quot;#cb1-12&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;              ,&lt;span class=&quot;ot&quot;&gt; _cTurns ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-13&quot;&gt;&lt;a href=&quot;#cb1-13&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;              }&lt;/span&gt;
&lt;span id=&quot;cb1-14&quot;&gt;&lt;a href=&quot;#cb1-14&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;deriving&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Eq&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;Show&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb1-15&quot;&gt;&lt;a href=&quot;#cb1-15&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-16&quot;&gt;&lt;a href=&quot;#cb1-16&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;makeLenses &amp;#39;&lt;span class=&quot;dt&quot;&gt;&amp;#39;Cart&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-17&quot;&gt;&lt;a href=&quot;#cb1-17&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-18&quot;&gt;&lt;a href=&quot;#cb1-18&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;newtype&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;ScanPoint&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;SP&lt;/span&gt; {&lt;span class=&quot;ot&quot;&gt; _getSP ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Point&lt;/span&gt; }&lt;/span&gt;
&lt;span id=&quot;cb1-19&quot;&gt;&lt;a href=&quot;#cb1-19&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;deriving&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Eq&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;Show&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;Num&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb1-20&quot;&gt;&lt;a href=&quot;#cb1-20&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-21&quot;&gt;&lt;a href=&quot;#cb1-21&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Ord&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;ScanPoint&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-22&quot;&gt;&lt;a href=&quot;#cb1-22&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;compare&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; comparing (view _y &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; _getSP)&lt;/span&gt;
&lt;span id=&quot;cb1-23&quot;&gt;&lt;a href=&quot;#cb1-23&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;           &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; comparing (view _x &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; _getSP)&lt;/span&gt;
&lt;span id=&quot;cb1-24&quot;&gt;&lt;a href=&quot;#cb1-24&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-25&quot;&gt;&lt;a href=&quot;#cb1-25&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;World&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Map&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Point&lt;/span&gt;     &lt;span class=&quot;dt&quot;&gt;Turn&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-26&quot;&gt;&lt;a href=&quot;#cb1-26&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Carts&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Map&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;ScanPoint&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Cart&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We will be using &lt;code&gt;Map ScanPoint Cart&lt;/code&gt; as our priority queue; &lt;code&gt;ScanPoint&lt;/code&gt; newtype-wraps a &lt;code&gt;Point&lt;/code&gt; in a way that its &lt;code&gt;Ord&lt;/code&gt; instance will give us the lowest &lt;code&gt;y&lt;/code&gt; first, &lt;em&gt;then&lt;/em&gt; the lowest &lt;code&gt;x&lt;/code&gt; to break ties.&lt;/p&gt;
&lt;p&gt;Note that we don’t ever have to store any of the “track” positions, &lt;code&gt;|&lt;/code&gt; or &lt;code&gt;-&lt;/code&gt;. That’s because they don’t affect the carts in any way.&lt;/p&gt;
&lt;p&gt;Next, we can implement the actual logic of moving a single &lt;code&gt;Cart&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb2&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb2-1&quot;&gt;&lt;a href=&quot;#cb2-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;stepCart ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;World&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;ScanPoint&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Cart&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;ScanPoint&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;Cart&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb2-2&quot;&gt;&lt;a href=&quot;#cb2-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;stepCart w (&lt;span class=&quot;dt&quot;&gt;SP&lt;/span&gt; p) c &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;SP&lt;/span&gt; p&amp;#39;, &lt;span class=&quot;fu&quot;&gt;maybe&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt; turner (M.lookup p&amp;#39; w) c)&lt;/span&gt;
&lt;span id=&quot;cb2-3&quot;&gt;&lt;a href=&quot;#cb2-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-4&quot;&gt;&lt;a href=&quot;#cb2-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    p&amp;#39; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; p &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; c &lt;span class=&quot;op&quot;&gt;^.&lt;/span&gt; cDir &lt;span class=&quot;kw&quot;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-5&quot;&gt;&lt;a href=&quot;#cb2-5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;dt&quot;&gt;DN&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;V2&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;    (&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb2-6&quot;&gt;&lt;a href=&quot;#cb2-6&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;dt&quot;&gt;DE&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;V2&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;    &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-7&quot;&gt;&lt;a href=&quot;#cb2-7&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;dt&quot;&gt;DS&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;V2&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;    &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-8&quot;&gt;&lt;a href=&quot;#cb2-8&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;dt&quot;&gt;DW&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;V2&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-9&quot;&gt;&lt;a href=&quot;#cb2-9&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    turner &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; \&lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-10&quot;&gt;&lt;a href=&quot;#cb2-10&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;dt&quot;&gt;TurnNW&lt;/span&gt;    &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; over cDir &lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; \&lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;DN&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;DE&lt;/span&gt;; &lt;span class=&quot;dt&quot;&gt;DE&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;DN&lt;/span&gt;; &lt;span class=&quot;dt&quot;&gt;DS&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;DW&lt;/span&gt;; &lt;span class=&quot;dt&quot;&gt;DW&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;DS&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-11&quot;&gt;&lt;a href=&quot;#cb2-11&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;dt&quot;&gt;TurnNE&lt;/span&gt;    &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; over cDir &lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; \&lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;DN&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;DW&lt;/span&gt;; &lt;span class=&quot;dt&quot;&gt;DW&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;DN&lt;/span&gt;; &lt;span class=&quot;dt&quot;&gt;DS&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;DE&lt;/span&gt;; &lt;span class=&quot;dt&quot;&gt;DE&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;DS&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-12&quot;&gt;&lt;a href=&quot;#cb2-12&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;dt&quot;&gt;TurnInter&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; over cTurns (&lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; over cDir (turnWith (c &lt;span class=&quot;op&quot;&gt;^.&lt;/span&gt; cTurns))&lt;/span&gt;
&lt;span id=&quot;cb2-13&quot;&gt;&lt;a href=&quot;#cb2-13&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    turnWith i &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; i &lt;span class=&quot;ot&quot;&gt;`mod`&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-14&quot;&gt;&lt;a href=&quot;#cb2-14&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; turnLeft&lt;/span&gt;
&lt;span id=&quot;cb2-15&quot;&gt;&lt;a href=&quot;#cb2-15&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;id&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-16&quot;&gt;&lt;a href=&quot;#cb2-16&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;      _ &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; turnLeft &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; turnLeft &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; turnLeft&lt;/span&gt;
&lt;span id=&quot;cb2-17&quot;&gt;&lt;a href=&quot;#cb2-17&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    turnLeft &lt;span class=&quot;dt&quot;&gt;DN&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;DW&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-18&quot;&gt;&lt;a href=&quot;#cb2-18&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    turnLeft &lt;span class=&quot;dt&quot;&gt;DE&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;DN&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-19&quot;&gt;&lt;a href=&quot;#cb2-19&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    turnLeft &lt;span class=&quot;dt&quot;&gt;DS&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;DE&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-20&quot;&gt;&lt;a href=&quot;#cb2-20&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    turnLeft &lt;span class=&quot;dt&quot;&gt;DW&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;DS&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There are ways we can the turning and &lt;code&gt;Dir&lt;/code&gt; manipulations, but this way already is pretty clean, I think! We use lens combinators like &lt;code&gt;over&lt;/code&gt; to simplify our updating of carts. If there is no turn at a given coordinate, then the cart just stays the same, and only the position updates.&lt;/p&gt;
&lt;p&gt;Now, to separate out the &lt;em&gt;running&lt;/em&gt; of the simulation from the &lt;em&gt;consumption&lt;/em&gt; of the results, we can make a type that emits the result of a single step in the world:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb3&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb3-1&quot;&gt;&lt;a href=&quot;#cb3-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;CartLog&lt;/span&gt; a &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;CLCrash&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Point&lt;/span&gt; a      &lt;span class=&quot;co&quot;&gt;-- ^ A crash, at a given point&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-2&quot;&gt;&lt;a href=&quot;#cb3-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;               &lt;span class=&quot;op&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;CLTick&lt;/span&gt;        a      &lt;span class=&quot;co&quot;&gt;-- ^ No crashes, just a normal timestep&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-3&quot;&gt;&lt;a href=&quot;#cb3-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;               &lt;span class=&quot;op&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;CLDone&lt;/span&gt;  &lt;span class=&quot;dt&quot;&gt;Point&lt;/span&gt;        &lt;span class=&quot;co&quot;&gt;-- ^ Only one car left, at a given point&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-4&quot;&gt;&lt;a href=&quot;#cb3-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;deriving&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Show&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;Functor&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And we can use that to implement &lt;code&gt;stepCarts&lt;/code&gt;, which takes a “waiting, done” queue of carts and:&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;If &lt;code&gt;waiting&lt;/code&gt; is empty, we dump &lt;code&gt;done&lt;/code&gt; back into &lt;code&gt;waiting&lt;/code&gt; and emit &lt;code&gt;CLTick&lt;/code&gt; with our updated state. However, if &lt;code&gt;done&lt;/code&gt; is empty, then we are done; emit &lt;code&gt;CLDone&lt;/code&gt; with no new state.&lt;/li&gt;
&lt;li&gt;Otherwise, pop an cart from &lt;code&gt;waiting&lt;/code&gt; and move it. If there is a crash, emit &lt;code&gt;CLCrash&lt;/code&gt; with the updated state (with things deleted).&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb4&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb4-1&quot;&gt;&lt;a href=&quot;#cb4-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;stepCarts&lt;/span&gt;
&lt;span id=&quot;cb4-2&quot;&gt;&lt;a href=&quot;#cb4-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;    ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;World&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb4-3&quot;&gt;&lt;a href=&quot;#cb4-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Carts&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;Carts&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb4-4&quot;&gt;&lt;a href=&quot;#cb4-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;CartLog&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Carts&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;Carts&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb4-5&quot;&gt;&lt;a href=&quot;#cb4-5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;stepCarts w (waiting, done) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; M.minViewWithKey waiting &lt;span class=&quot;kw&quot;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb4-6&quot;&gt;&lt;a href=&quot;#cb4-6&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;dt&quot;&gt;Nothing&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; M.minViewWithKey done &lt;span class=&quot;kw&quot;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb4-7&quot;&gt;&lt;a href=&quot;#cb4-7&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt; ((&lt;span class=&quot;dt&quot;&gt;SP&lt;/span&gt; lastPos, _), M.null&lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;dt&quot;&gt;True&lt;/span&gt;) &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;CLDone&lt;/span&gt; lastPos&lt;/span&gt;
&lt;span id=&quot;cb4-8&quot;&gt;&lt;a href=&quot;#cb4-8&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;      _                                    &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;CLTick&lt;/span&gt; (done, M.empty)&lt;/span&gt;
&lt;span id=&quot;cb4-9&quot;&gt;&lt;a href=&quot;#cb4-9&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt; (&lt;span class=&quot;fu&quot;&gt;uncurry&lt;/span&gt; (stepCart w) &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; (p, c), waiting&amp;#39;) &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb4-10&quot;&gt;&lt;a href=&quot;#cb4-10&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; M.lookup p (waiting&amp;#39; &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; done) &lt;span class=&quot;kw&quot;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb4-11&quot;&gt;&lt;a href=&quot;#cb4-11&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Nothing&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;CLTick&lt;/span&gt;             (waiting&amp;#39;           , M.insert p c done)&lt;/span&gt;
&lt;span id=&quot;cb4-12&quot;&gt;&lt;a href=&quot;#cb4-12&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt; _  &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;CLCrash&lt;/span&gt; (_getSP p) (M.delete p waiting&amp;#39;, M.delete p done  )&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, we can write our consumers. These will be fed the results of &lt;code&gt;stepCarts&lt;/code&gt; as they are produced. However, the &lt;code&gt;a&lt;/code&gt; parameters will actually be the “next results”, in a way:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb5&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb5-1&quot;&gt;&lt;a href=&quot;#cb5-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- | Get the result of the first crash.&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-2&quot;&gt;&lt;a href=&quot;#cb5-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;firstCrash ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;CartLog&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Maybe&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Point&lt;/span&gt;) &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Maybe&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Point&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-3&quot;&gt;&lt;a href=&quot;#cb5-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;firstCrash (&lt;span class=&quot;dt&quot;&gt;CLCrash&lt;/span&gt; p _) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt; p   &lt;span class=&quot;co&quot;&gt;-- this is it, chief&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-4&quot;&gt;&lt;a href=&quot;#cb5-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;firstCrash (&lt;span class=&quot;dt&quot;&gt;CLTick&lt;/span&gt;    p) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; p        &lt;span class=&quot;co&quot;&gt;-- no, we have to go deeper&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-5&quot;&gt;&lt;a href=&quot;#cb5-5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;firstCrash (&lt;span class=&quot;dt&quot;&gt;CLDone&lt;/span&gt;  _  ) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Nothing&lt;/span&gt;  &lt;span class=&quot;co&quot;&gt;-- we reached the end of the line, no crash.&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-6&quot;&gt;&lt;a href=&quot;#cb5-6&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-7&quot;&gt;&lt;a href=&quot;#cb5-7&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- | Get the final point.&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-8&quot;&gt;&lt;a href=&quot;#cb5-8&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;lastPoint ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;CartLog&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Point&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-9&quot;&gt;&lt;a href=&quot;#cb5-9&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;lastPoint (&lt;span class=&quot;dt&quot;&gt;CLCrash&lt;/span&gt; _ p) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; p   &lt;span class=&quot;co&quot;&gt;-- we have to go deeper&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-10&quot;&gt;&lt;a href=&quot;#cb5-10&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;lastPoint (&lt;span class=&quot;dt&quot;&gt;CLTick&lt;/span&gt;    p) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; p   &lt;span class=&quot;co&quot;&gt;-- even deeper&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-11&quot;&gt;&lt;a href=&quot;#cb5-11&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;lastPoint (&lt;span class=&quot;dt&quot;&gt;CLDone&lt;/span&gt;  p  ) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; p   &lt;span class=&quot;co&quot;&gt;-- we&amp;#39;re here&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And now:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb6&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb6-1&quot;&gt;&lt;a href=&quot;#cb6-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;day13a ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;World&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Carts&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Maybe&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Point&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-2&quot;&gt;&lt;a href=&quot;#cb6-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;day13a w c &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; (firstCrash &lt;span class=&quot;ot&quot;&gt;`hylo`&lt;/span&gt; stepCarts w) (c, M.empty)&lt;/span&gt;
&lt;span id=&quot;cb6-3&quot;&gt;&lt;a href=&quot;#cb6-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-4&quot;&gt;&lt;a href=&quot;#cb6-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;day13b ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;World&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Carts&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Point&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-5&quot;&gt;&lt;a href=&quot;#cb6-5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;day13b w c &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; (lastPoint &lt;span class=&quot;ot&quot;&gt;`hylo`&lt;/span&gt; stepCarts w) (c, M.empty)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The magic of &lt;code&gt;hylo&lt;/code&gt; is that, as &lt;code&gt;firstCrash&lt;/code&gt; and &lt;code&gt;lastPoint&lt;/code&gt; “demand” new values or points, &lt;code&gt;hylo&lt;/code&gt; will ask &lt;code&gt;stepCarts w&lt;/code&gt; for them. So, &lt;code&gt;stepCarts w&lt;/code&gt; is iterated as many times as &lt;code&gt;firstCrash&lt;/code&gt; and &lt;code&gt;lastPoint&lt;/code&gt; needs.&lt;/p&gt;
&lt;h3 id=&quot;day-13-benchmarks&quot;&gt;Day 13 Benchmarks&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt; Day 13a
benchmarking...
time                 14.85 ms   (14.02 ms .. 15.76 ms)
                     0.987 R²   (0.974 R² .. 0.999 R²)
mean                 15.50 ms   (14.86 ms .. 17.41 ms)
std dev              2.581 ms   (580.6 μs .. 5.173 ms)
variance introduced by outliers: 75% (severely inflated)

&amp;gt;&amp;gt; Day 13b
benchmarking...
time                 20.44 ms   (19.71 ms .. 21.10 ms)
                     0.991 R²   (0.977 R² .. 0.998 R²)
mean                 22.90 ms   (21.91 ms .. 24.08 ms)
std dev              2.522 ms   (1.658 ms .. 3.644 ms)
variance introduced by outliers: 48% (moderately inflated)&lt;/code&gt;&lt;/pre&gt;
</description>
      <link>https://github.com/mstksg/advent-of-code-2018/blob/master/reflections.md#day-13</link>
      <pubDate>Thu, 13 Dec 2018 01:00:00 EST</pubDate>
    </item>

    <item>
      <title>Day 12</title>
      <description>&lt;h2 id=&quot;day-12&quot;&gt;Day 12&lt;/h2&gt;
&lt;!--
This section is generated and compiled by the build script at ./Build.hs from
the file `./reflections/day12.md`.  If you want to edit this, edit
that file instead!
--&gt;
&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://adventofcode.com/2018/day/12&quot;&gt;Prompt&lt;/a&gt;&lt;/em&gt; / &lt;em&gt;&lt;a href=&quot;https://github.com/mstksg/advent-of-code-2018/blob/master/src/AOC/Challenge/Day12.hs&quot;&gt;Code&lt;/a&gt;&lt;/em&gt; / &lt;em&gt;&lt;a href=&quot;https://mstksg.github.io/advent-of-code-2018/src/AOC.Challenge.Day12.html&quot;&gt;Rendered&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Day 12 is made a little more fun with everyone’s favorite Haskell data structures: maps and sets! (Note that I’ve pretty much used Maps and Sets for every challenge, more or less!)&lt;/p&gt;
&lt;p&gt;We can represent a “context”, or neighborhood, as a &lt;code&gt;Set (Finite 5)&lt;/code&gt;, where &lt;code&gt;Finite 5&lt;/code&gt; can be thought of as a type that only contains the numbers 0, 1, 2, 3, and 4 (five elements only). We’ll treat 0 as “two to the left”, 1 as “one to the left”, 2 as “the current point”, 3 as “one to the right”, and 4 as “two to the right”. The set will &lt;em&gt;contain&lt;/em&gt; the given finite if it is “on” in that position. So, for example, the context &lt;code&gt;#.##.&lt;/code&gt; would be &lt;code&gt;S.fromList [0,2,3]&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb1&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb1-1&quot;&gt;&lt;a href=&quot;#cb1-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Ctx&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Set&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Finite&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Our ruleset will be &lt;code&gt;Set Ctx&lt;/code&gt;, or a set of neighborhoods. If a given neighborhood is &lt;em&gt;in&lt;/em&gt; the set, then that means that the plant is meant to turn on. Otherwise, it means that the plant is meant to turn off. So, &lt;code&gt;#.##. =&amp;gt; #&lt;/code&gt; would mean that the item &lt;code&gt;S.fromList [0,2,3]&lt;/code&gt; is in the ruleset, but &lt;code&gt;##..# =&amp;gt; .&lt;/code&gt; would mean that the item &lt;code&gt;S.fromList [0,1,4]&lt;/code&gt; is &lt;em&gt;not&lt;/em&gt; in the ruleset.&lt;/p&gt;
&lt;p&gt;Finally, the type of our “world” is just &lt;code&gt;Set Int&lt;/code&gt;. If a plant is “on”, then its index will be in the set. Otherwise, its index will &lt;em&gt;not&lt;/em&gt; be in the set.&lt;/p&gt;
&lt;p&gt;One nice thing about representing the world as &lt;code&gt;Set Int&lt;/code&gt; is that getting the “sum of all plant IDs that are on” is just &lt;code&gt;sum :: Set Int -&amp;gt; Int&lt;/code&gt; :)&lt;/p&gt;
&lt;p&gt;Writing our step function is going to be filtering all of the “candidate” positions for the ones that remain “on”. That’s it! We perform this filter by aggregating the neighborhood around each point and checking if the neighborhood is in the ruleset.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb2&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb2-1&quot;&gt;&lt;a href=&quot;#cb2-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;step&lt;/span&gt;
&lt;span id=&quot;cb2-2&quot;&gt;&lt;a href=&quot;#cb2-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;    ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Ctx&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-3&quot;&gt;&lt;a href=&quot;#cb2-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-4&quot;&gt;&lt;a href=&quot;#cb2-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-5&quot;&gt;&lt;a href=&quot;#cb2-5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;step ctxs w0 &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; S.fromDistinctAscList&lt;/span&gt;
&lt;span id=&quot;cb2-6&quot;&gt;&lt;a href=&quot;#cb2-6&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;             &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;filter&lt;/span&gt; go&lt;/span&gt;
&lt;span id=&quot;cb2-7&quot;&gt;&lt;a href=&quot;#cb2-7&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;             &lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; [S.findMin w0 &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;..&lt;/span&gt; S.findMax w0 &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;]&lt;/span&gt;
&lt;span id=&quot;cb2-8&quot;&gt;&lt;a href=&quot;#cb2-8&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-9&quot;&gt;&lt;a href=&quot;#cb2-9&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    go i &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; neighbs &lt;span class=&quot;ot&quot;&gt;`S.member`&lt;/span&gt; ctxs&lt;/span&gt;
&lt;span id=&quot;cb2-10&quot;&gt;&lt;a href=&quot;#cb2-10&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-11&quot;&gt;&lt;a href=&quot;#cb2-11&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        neighbs &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; S.fromDistinctAscList &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;flip&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;filter&lt;/span&gt; finites &lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; \j &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-12&quot;&gt;&lt;a href=&quot;#cb2-12&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;          (i &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fromIntegral&lt;/span&gt; j) &lt;span class=&quot;ot&quot;&gt;`S.member`&lt;/span&gt; w0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Part 2 requires a bit of trickery. If we monitor our outputs, we can observe that the entire shape of the world starts to loop after a given amount of time. We can find this loop structure by stepping repeatedly and finding the first item that is repeated, by using a “seen items” set. We have to make sure to “normalize” our representation so that the same shame will be matched no matter what coordinate it starts at. I did this by subtracting out the minimum item in the set, so that the leftmost plant is always at zero.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb3&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb3-1&quot;&gt;&lt;a href=&quot;#cb3-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;findLoop&lt;/span&gt;
&lt;span id=&quot;cb3-2&quot;&gt;&lt;a href=&quot;#cb3-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;    ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Ctx&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-3&quot;&gt;&lt;a href=&quot;#cb3-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Pos&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-4&quot;&gt;&lt;a href=&quot;#cb3-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;)      &lt;span class=&quot;co&quot;&gt;-- time to loop, loop size, loop incr&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-5&quot;&gt;&lt;a href=&quot;#cb3-5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;findLoop ctxs w0 &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; go (M.singleton w0 (&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)) &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; w0&lt;/span&gt;
&lt;span id=&quot;cb3-6&quot;&gt;&lt;a href=&quot;#cb3-6&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-7&quot;&gt;&lt;a href=&quot;#cb3-7&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    go &lt;span class=&quot;op&quot;&gt;!&lt;/span&gt;seen &lt;span class=&quot;op&quot;&gt;!&lt;/span&gt;i &lt;span class=&quot;op&quot;&gt;!&lt;/span&gt;w &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; M.lookup w&amp;#39;Norm seen &lt;span class=&quot;kw&quot;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-8&quot;&gt;&lt;a href=&quot;#cb3-8&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Nothing&lt;/span&gt;              &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; go (M.insert w&amp;#39;Norm (mn, i) seen) (i &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;) w&amp;#39;&lt;/span&gt;
&lt;span id=&quot;cb3-9&quot;&gt;&lt;a href=&quot;#cb3-9&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt; (seenMn, seenI) &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; (seenI, i &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; seenI, mn &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; seenMn)&lt;/span&gt;
&lt;span id=&quot;cb3-10&quot;&gt;&lt;a href=&quot;#cb3-10&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-11&quot;&gt;&lt;a href=&quot;#cb3-11&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        w&amp;#39;           &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; step ctxs w&lt;/span&gt;
&lt;span id=&quot;cb3-12&quot;&gt;&lt;a href=&quot;#cb3-12&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        (mn, w&amp;#39;Norm) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; normalize w&amp;#39;&lt;/span&gt;
&lt;span id=&quot;cb3-13&quot;&gt;&lt;a href=&quot;#cb3-13&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    normalize w &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; (mn, S.map (&lt;span class=&quot;fu&quot;&gt;subtract&lt;/span&gt; mn) w)&lt;/span&gt;
&lt;span id=&quot;cb3-14&quot;&gt;&lt;a href=&quot;#cb3-14&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-15&quot;&gt;&lt;a href=&quot;#cb3-15&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        mn &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; S.findMin w&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And now we can be a little clever using &lt;code&gt;divMod&lt;/code&gt; to factor out 50 billion into the “initialization”, the “loop amount”, and the “amount to increase”:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb4&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb4-1&quot;&gt;&lt;a href=&quot;#cb4-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;stepN&lt;/span&gt;
&lt;span id=&quot;cb4-2&quot;&gt;&lt;a href=&quot;#cb4-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;    ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb4-3&quot;&gt;&lt;a href=&quot;#cb4-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Pos&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb4-4&quot;&gt;&lt;a href=&quot;#cb4-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Ctx&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb4-5&quot;&gt;&lt;a href=&quot;#cb4-5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Pos&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb4-6&quot;&gt;&lt;a href=&quot;#cb4-6&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;stepN n w ctx &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; goN extra&lt;/span&gt;
&lt;span id=&quot;cb4-7&quot;&gt;&lt;a href=&quot;#cb4-7&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;              &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; S.map (&lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; (loopIncr &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; looped))&lt;/span&gt;
&lt;span id=&quot;cb4-8&quot;&gt;&lt;a href=&quot;#cb4-8&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;              &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; goN ttl&lt;/span&gt;
&lt;span id=&quot;cb4-9&quot;&gt;&lt;a href=&quot;#cb4-9&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;              &lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; w&lt;/span&gt;
&lt;span id=&quot;cb4-10&quot;&gt;&lt;a href=&quot;#cb4-10&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb4-11&quot;&gt;&lt;a href=&quot;#cb4-11&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    goN m &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;!!!&lt;/span&gt; m) &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;iterate&lt;/span&gt; (step ctx)&lt;/span&gt;
&lt;span id=&quot;cb4-12&quot;&gt;&lt;a href=&quot;#cb4-12&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    (ttl, loopSize, loopIncr) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; findLoop ctx w&lt;/span&gt;
&lt;span id=&quot;cb4-13&quot;&gt;&lt;a href=&quot;#cb4-13&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    (looped, extra) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; (n &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; ttl) &lt;span class=&quot;ot&quot;&gt;`divMod`&lt;/span&gt; loopSize&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;day-12-benchmarks&quot;&gt;Day 12 Benchmarks&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt; Day 12a
benchmarking...
time                 1.008 ms   (987.2 μs .. 1.023 ms)
                     0.994 R²   (0.990 R² .. 0.998 R²)
mean                 989.1 μs   (971.1 μs .. 1.006 ms)
std dev              64.14 μs   (44.54 μs .. 84.12 μs)
variance introduced by outliers: 53% (severely inflated)

* parsing and formatting times excluded

&amp;gt;&amp;gt; Day 12b
benchmarking...
time                 22.88 ms   (22.68 ms .. 23.12 ms)
                     1.000 R²   (0.999 R² .. 1.000 R²)
mean                 22.89 ms   (22.78 ms .. 23.10 ms)
std dev              305.3 μs   (189.3 μs .. 471.2 μs)

* parsing and formatting times excluded&lt;/code&gt;&lt;/pre&gt;
</description>
      <link>https://github.com/mstksg/advent-of-code-2018/blob/master/reflections.md#day-12</link>
      <pubDate>Wed, 12 Dec 2018 01:00:00 EST</pubDate>
    </item>

    <item>
      <title>Day 11</title>
      <description>&lt;h2 id=&quot;day-11&quot;&gt;Day 11&lt;/h2&gt;
&lt;!--
This section is generated and compiled by the build script at ./Build.hs from
the file `./reflections/day11.md`.  If you want to edit this, edit
that file instead!
--&gt;
&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://adventofcode.com/2018/day/11&quot;&gt;Prompt&lt;/a&gt;&lt;/em&gt; / &lt;em&gt;&lt;a href=&quot;https://github.com/mstksg/advent-of-code-2018/blob/master/src/AOC/Challenge/Day11.hs&quot;&gt;Code&lt;/a&gt;&lt;/em&gt; / &lt;em&gt;&lt;a href=&quot;https://mstksg.github.io/advent-of-code-2018/src/AOC.Challenge.Day11.html&quot;&gt;Rendered&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Day 11 is a nice opportunity to demonstrate dynamic programming in a purely functional language like Haskell.&lt;/p&gt;
&lt;p&gt;Once we define a function to get a power level based on a serial number:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb1&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb1-1&quot;&gt;&lt;a href=&quot;#cb1-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;V2&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-2&quot;&gt;&lt;a href=&quot;#cb1-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-3&quot;&gt;&lt;a href=&quot;#cb1-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;powerLevel ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-4&quot;&gt;&lt;a href=&quot;#cb1-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;powerLevel sid (&lt;span class=&quot;dt&quot;&gt;V2&lt;/span&gt; x y) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; hun ((rid &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; y &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; sid) &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; rid) &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-5&quot;&gt;&lt;a href=&quot;#cb1-5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-6&quot;&gt;&lt;a href=&quot;#cb1-6&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    hun &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;ot&quot;&gt;`mod`&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; (&lt;span class=&quot;ot&quot;&gt;`div`&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb1-7&quot;&gt;&lt;a href=&quot;#cb1-7&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    rid &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; x &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can create a &lt;code&gt;Map&lt;/code&gt; of of &lt;code&gt;Point&lt;/code&gt; to power level, by creating the set of all points (using &lt;code&gt;range&lt;/code&gt; from &lt;em&gt;Data.Ix&lt;/em&gt;) and using &lt;code&gt;M.fromSet&lt;/code&gt; with a function.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb2&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb2-1&quot;&gt;&lt;a href=&quot;#cb2-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;mkMap ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Map&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-2&quot;&gt;&lt;a href=&quot;#cb2-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;mkMap i &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; M.fromSet (powerLevel i)&lt;/span&gt;
&lt;span id=&quot;cb2-3&quot;&gt;&lt;a href=&quot;#cb2-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; S.fromList&lt;/span&gt;
&lt;span id=&quot;cb2-4&quot;&gt;&lt;a href=&quot;#cb2-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;range&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;V2&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;V2&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;300&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;300&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, both Part 1 and Part 2 involve finding sums of contiguous squares in the input. One popular way to do this quickly for many different sums is to build a [summed-area table][]&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb3&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb3-1&quot;&gt;&lt;a href=&quot;#cb3-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;summedAreaTable ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Map&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Map&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-2&quot;&gt;&lt;a href=&quot;#cb3-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;summedAreaTable mp &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; force sat&lt;/span&gt;
&lt;span id=&quot;cb3-3&quot;&gt;&lt;a href=&quot;#cb3-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-4&quot;&gt;&lt;a href=&quot;#cb3-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    sat &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; M.mapWithKey go mp&lt;/span&gt;
&lt;span id=&quot;cb3-5&quot;&gt;&lt;a href=&quot;#cb3-5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    go p0 v &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; v) &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; catMaybes &lt;span class=&quot;op&quot;&gt;$&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-6&quot;&gt;&lt;a href=&quot;#cb3-6&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;      [ &lt;span class=&quot;fu&quot;&gt;negate&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; M.lookup (p0 &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;V2&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;) sat&lt;/span&gt;
&lt;span id=&quot;cb3-7&quot;&gt;&lt;a href=&quot;#cb3-7&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;      ,            M.lookup (p0 &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;V2&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;) sat&lt;/span&gt;
&lt;span id=&quot;cb3-8&quot;&gt;&lt;a href=&quot;#cb3-8&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;      ,            M.lookup (p0 &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;V2&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;) sat&lt;/span&gt;
&lt;span id=&quot;cb3-9&quot;&gt;&lt;a href=&quot;#cb3-9&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;      ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is where the dynamic programming happens: our summed area is &lt;code&gt;sat&lt;/code&gt;, and we define &lt;code&gt;sat&lt;/code&gt; in a self-recursive way, using &lt;code&gt;M.mapWithKey go&lt;/code&gt;. &lt;code&gt;M.mapWithKey go&lt;/code&gt; lazily generates each cell of &lt;code&gt;sat&lt;/code&gt; by &lt;em&gt;referring to other cells in &lt;code&gt;sat&lt;/code&gt;&lt;/em&gt;. Because of laziness, &lt;code&gt;mapWithKey&lt;/code&gt; doesn’t do any actual “mapping”; but, rather, allocates thunks at each value in the map. As soon as these thunks are asked for, they resolve and are kept as resolved values.&lt;/p&gt;
&lt;p&gt;For example, note that &lt;code&gt;go (V2 1 1) v11&lt;/code&gt; does not refer to any other value. So, the map at &lt;code&gt;V2 1 1&lt;/code&gt; is just &lt;code&gt;v11&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;However, &lt;code&gt;go (V2 2 1) v21&lt;/code&gt; depends on one other value: &lt;code&gt;M.lookup (V2 1 1) sat&lt;/code&gt;. But, because we already have evaluated this to &lt;code&gt;v11&lt;/code&gt;, all is well; our answer is &lt;code&gt;v21 + v11&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now, &lt;code&gt;go (V2 2 2) v22&lt;/code&gt; depends on three other values: it depends on &lt;code&gt;M.lookup (V 1 1) sat&lt;/code&gt;, &lt;code&gt;M.lookup (V2 1 2) sat&lt;/code&gt;, and &lt;code&gt;M.lookup (V2 1 2) sat&lt;/code&gt;. GHC will go and evaluate the ones it needs to evaluate, caching them in the values of the map, and then just now return the pre-evaluated results.&lt;/p&gt;
&lt;p&gt;In this way, we build the summed area table “lazily” in a self-recursive way. At the end of it all, we return &lt;code&gt;force sat&lt;/code&gt;, which makes sure the entire &lt;code&gt;sat&lt;/code&gt; map is filled out all the way (getting rid of all thunks) when the user actually tries to &lt;em&gt;use&lt;/em&gt; the summed area table.&lt;/p&gt;
&lt;p&gt;The rest of this involves just making a list of all possible sums of squares, and finding the maximum of all of them. Because all of our sums of squares are now calculable in O(1) on the size of the square (after we generate our table), the search is very manageable.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb4&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb4-1&quot;&gt;&lt;a href=&quot;#cb4-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;fromSAT ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Map&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb4-2&quot;&gt;&lt;a href=&quot;#cb4-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;fromSAT sat (&lt;span class=&quot;fu&quot;&gt;subtract&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;V2&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)&lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt;p) n &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; catMaybes &lt;span class=&quot;op&quot;&gt;$&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb4-3&quot;&gt;&lt;a href=&quot;#cb4-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    [            M.lookup p            sat&lt;/span&gt;
&lt;span id=&quot;cb4-4&quot;&gt;&lt;a href=&quot;#cb4-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    ,            M.lookup (p &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;V2&lt;/span&gt; n n) sat&lt;/span&gt;
&lt;span id=&quot;cb4-5&quot;&gt;&lt;a href=&quot;#cb4-5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    , &lt;span class=&quot;fu&quot;&gt;negate&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; M.lookup (p &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;V2&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; n) sat&lt;/span&gt;
&lt;span id=&quot;cb4-6&quot;&gt;&lt;a href=&quot;#cb4-6&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    , &lt;span class=&quot;fu&quot;&gt;negate&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; M.lookup (p &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;V2&lt;/span&gt; n &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;) sat&lt;/span&gt;
&lt;span id=&quot;cb4-7&quot;&gt;&lt;a href=&quot;#cb4-7&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    ]&lt;/span&gt;
&lt;span id=&quot;cb4-8&quot;&gt;&lt;a href=&quot;#cb4-8&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb4-9&quot;&gt;&lt;a href=&quot;#cb4-9&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;findMaxAny ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Map&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Point&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb4-10&quot;&gt;&lt;a href=&quot;#cb4-10&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;findMaxAny mp &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fst&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; maximumBy (comparing &lt;span class=&quot;fu&quot;&gt;snd&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb4-11&quot;&gt;&lt;a href=&quot;#cb4-11&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;             &lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; [ ((p, n), fromSAT sat p n)&lt;/span&gt;
&lt;span id=&quot;cb4-12&quot;&gt;&lt;a href=&quot;#cb4-12&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;               , n &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; [&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;300&lt;/span&gt;]&lt;/span&gt;
&lt;span id=&quot;cb4-13&quot;&gt;&lt;a href=&quot;#cb4-13&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;               , p &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;range&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;V2&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;V2&lt;/span&gt; (&lt;span class=&quot;dv&quot;&gt;300&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; n &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;) (&lt;span class=&quot;dv&quot;&gt;300&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; n &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&quot;cb4-14&quot;&gt;&lt;a href=&quot;#cb4-14&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;               ]&lt;/span&gt;
&lt;span id=&quot;cb4-15&quot;&gt;&lt;a href=&quot;#cb4-15&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb4-16&quot;&gt;&lt;a href=&quot;#cb4-16&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    sat &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; summedAreaTable mp&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note the benchmarks below are actually using an early-cut-off version of &lt;code&gt;findMaxAny&lt;/code&gt; that I implemented after thinking about ways of optimization.&lt;/p&gt;
&lt;h3 id=&quot;day-11-benchmarks&quot;&gt;Day 11 Benchmarks&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt; Day 11a
benchmarking...
time                 78.61 ms   (76.98 ms .. 80.12 ms)
                     0.999 R²   (0.999 R² .. 1.000 R²)
mean                 78.82 ms   (77.54 ms .. 79.78 ms)
std dev              2.017 ms   (1.127 ms .. 3.346 ms)

* parsing and formatting times excluded

&amp;gt;&amp;gt; Day 11b
benchmarking...
time                 755.1 ms   (625.6 ms .. 855.8 ms)
                     0.995 R²   (0.994 R² .. 1.000 R²)
mean                 856.4 ms   (805.0 ms .. 891.7 ms)
std dev              50.02 ms   (17.43 ms .. 66.73 ms)
variance introduced by outliers: 19% (moderately inflated)

* parsing and formatting times excluded&lt;/code&gt;&lt;/pre&gt;
</description>
      <link>https://github.com/mstksg/advent-of-code-2018/blob/master/reflections.md#day-11</link>
      <pubDate>Tue, 11 Dec 2018 01:00:00 EST</pubDate>
    </item>

    <item>
      <title>Day 10</title>
      <description>&lt;h2 id=&quot;day-10&quot;&gt;Day 10&lt;/h2&gt;
&lt;!--
This section is generated and compiled by the build script at ./Build.hs from
the file `./reflections/day10.md`.  If you want to edit this, edit
that file instead!
--&gt;
&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://adventofcode.com/2018/day/10&quot;&gt;Prompt&lt;/a&gt;&lt;/em&gt; / &lt;em&gt;&lt;a href=&quot;https://github.com/mstksg/advent-of-code-2018/blob/master/src/AOC/Challenge/Day10.hs&quot;&gt;Code&lt;/a&gt;&lt;/em&gt; / &lt;em&gt;&lt;a href=&quot;https://mstksg.github.io/advent-of-code-2018/src/AOC.Challenge.Day10.html&quot;&gt;Rendered&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I originally did this by running a simulation, parting the velocity and points into two lists and using &lt;code&gt;zipWith (+)&lt;/code&gt; for the simulation. However, I found a much nicer closed-form version that [I wrote about in my blog][d10b]!&lt;/p&gt;
&lt;h3 id=&quot;day-10-benchmarks&quot;&gt;Day 10 Benchmarks&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt; Day 10a
benchmarking...
time                 88.40 μs   (84.73 μs .. 92.44 μs)
                     0.989 R²   (0.982 R² .. 0.996 R²)
mean                 86.33 μs   (83.73 μs .. 89.41 μs)
std dev              8.788 μs   (7.142 μs .. 12.24 μs)
variance introduced by outliers: 82% (severely inflated)

* parsing and formatting times excluded

&amp;gt;&amp;gt; Day 10b
benchmarking...
time                 31.82 μs   (30.15 μs .. 33.56 μs)
                     0.980 R²   (0.974 R² .. 0.990 R²)
mean                 33.74 μs   (32.60 μs .. 34.83 μs)
std dev              4.172 μs   (3.601 μs .. 4.802 μs)
variance introduced by outliers: 89% (severely inflated)

* parsing and formatting times excluded&lt;/code&gt;&lt;/pre&gt;
</description>
      <link>https://github.com/mstksg/advent-of-code-2018/blob/master/reflections.md#day-10</link>
      <pubDate>Mon, 10 Dec 2018 01:00:00 EST</pubDate>
    </item>

    <item>
      <title>Day 9</title>
      <description>&lt;h2 id=&quot;day-9&quot;&gt;Day 9&lt;/h2&gt;
&lt;!--
This section is generated and compiled by the build script at ./Build.hs from
the file `./reflections/day09.md`.  If you want to edit this, edit
that file instead!
--&gt;
&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://adventofcode.com/2018/day/9&quot;&gt;Prompt&lt;/a&gt;&lt;/em&gt; / &lt;em&gt;&lt;a href=&quot;https://github.com/mstksg/advent-of-code-2018/blob/master/src/AOC/Challenge/Day09.hs&quot;&gt;Code&lt;/a&gt;&lt;/em&gt; / &lt;em&gt;&lt;a href=&quot;https://mstksg.github.io/advent-of-code-2018/src/AOC.Challenge.Day09.html&quot;&gt;Rendered&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;And today features the re-introduction of an Advent of Code staple: the (circular) tape/zipper! I used this data structure last year for days 5, 17, 18 and 23, and I consider them near and dear to my heart as Advent of Code data structures :)&lt;/p&gt;
&lt;p&gt;Last year, I wrote my own implementations on the spot, but since then I’ve come to appreciate the &lt;em&gt;&lt;a href=&quot;https://hackage.haskell.org/package/pointedlist&quot;&gt;pointed-list&lt;/a&gt;&lt;/em&gt; library. A circular tape is a circular data structure with a “focus” that you can move back and forth in. This is the data structure that implements exactly what the challenge talks about! It’s linear-time on “moving the focus”, and constant-time on insertions and deletions.&lt;/p&gt;
&lt;p&gt;The center of everything is the &lt;code&gt;place&lt;/code&gt; function, which takes a number to place and a tape to place it in, and returns an updated tape with the “score” accumulated for that round.&lt;/p&gt;
&lt;p&gt;We see that it is mostly a straightforward translation of the problem statement. If &lt;code&gt;x&lt;/code&gt; is a multiple of 23, then we move 7 spaces to the left, and return the resulting tape with the item deleted. The score is the deleted item plus &lt;code&gt;x&lt;/code&gt;. Otherwise, we just move 2 spaces to the right and insert &lt;code&gt;x&lt;/code&gt;, with a score of 0.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb1&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb1-1&quot;&gt;&lt;a href=&quot;#cb1-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;place&lt;/span&gt;
&lt;span id=&quot;cb1-2&quot;&gt;&lt;a href=&quot;#cb1-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;    ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;                       &lt;span class=&quot;co&quot;&gt;-- ^ number to place&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-3&quot;&gt;&lt;a href=&quot;#cb1-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;PointedList&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;           &lt;span class=&quot;co&quot;&gt;-- ^ tape&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-4&quot;&gt;&lt;a href=&quot;#cb1-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;PointedList&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;)    &lt;span class=&quot;co&quot;&gt;-- ^ resulting tape, and scored points&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-5&quot;&gt;&lt;a href=&quot;#cb1-5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;place x l&lt;/span&gt;
&lt;span id=&quot;cb1-6&quot;&gt;&lt;a href=&quot;#cb1-6&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;op&quot;&gt;|&lt;/span&gt; x &lt;span class=&quot;ot&quot;&gt;`mod`&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;23&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-7&quot;&gt;&lt;a href=&quot;#cb1-7&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt; l&amp;#39;       &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; PL.moveN (&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;7&lt;/span&gt;) l&lt;/span&gt;
&lt;span id=&quot;cb1-8&quot;&gt;&lt;a href=&quot;#cb1-8&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;          toAdd    &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; _focus l&amp;#39;&lt;/span&gt;
&lt;span id=&quot;cb1-9&quot;&gt;&lt;a href=&quot;#cb1-9&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;kw&quot;&gt;in&lt;/span&gt;  (toAdd &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; x, fromJust (PL.deleteRight l&amp;#39;))&lt;/span&gt;
&lt;span id=&quot;cb1-10&quot;&gt;&lt;a href=&quot;#cb1-10&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;op&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;otherwise&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-11&quot;&gt;&lt;a href=&quot;#cb1-11&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, (PL.insertLeft x &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; PL.moveN &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;) l)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We wrap it all up with a &lt;code&gt;run&lt;/code&gt; function, which is a strict fold over a list of &lt;code&gt;(currentPlayer, itemToPlace)&lt;/code&gt; pairs, accumulating a &lt;code&gt;(scorecard, tape)&lt;/code&gt; state (our scorecard will be a vector where each index is a different player’s score). At each step, we &lt;code&gt;place&lt;/code&gt;, and use the result to update our scorecard and tape. The &lt;em&gt;lens&lt;/em&gt; library offers some nice tool for incrementing a given index of a vector.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb2&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb2-1&quot;&gt;&lt;a href=&quot;#cb2-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;run&lt;/span&gt;
&lt;span id=&quot;cb2-2&quot;&gt;&lt;a href=&quot;#cb2-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;    ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;                  &lt;span class=&quot;co&quot;&gt;-- ^ number of players&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-3&quot;&gt;&lt;a href=&quot;#cb2-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;                  &lt;span class=&quot;co&quot;&gt;-- ^ Max # of piece&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-4&quot;&gt;&lt;a href=&quot;#cb2-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;V.Vector&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-5&quot;&gt;&lt;a href=&quot;#cb2-5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;run numPlayers maxPiece &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fst&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-6&quot;&gt;&lt;a href=&quot;#cb2-6&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;                        &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; foldl&amp;#39; go (V.replicate numPlayers &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, PL.singleton &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb2-7&quot;&gt;&lt;a href=&quot;#cb2-7&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;                        &lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;zip&lt;/span&gt; players toInsert&lt;/span&gt;
&lt;span id=&quot;cb2-8&quot;&gt;&lt;a href=&quot;#cb2-8&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-9&quot;&gt;&lt;a href=&quot;#cb2-9&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    go (&lt;span class=&quot;op&quot;&gt;!&lt;/span&gt;scores, &lt;span class=&quot;op&quot;&gt;!&lt;/span&gt;tp) (&lt;span class=&quot;op&quot;&gt;!&lt;/span&gt;player, &lt;span class=&quot;op&quot;&gt;!&lt;/span&gt;x) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; (scores &lt;span class=&quot;op&quot;&gt;&amp;amp;&lt;/span&gt; ix player &lt;span class=&quot;op&quot;&gt;+~&lt;/span&gt; pts, tp&amp;#39;)&lt;/span&gt;
&lt;span id=&quot;cb2-10&quot;&gt;&lt;a href=&quot;#cb2-10&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-11&quot;&gt;&lt;a href=&quot;#cb2-11&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        (pts, tp&amp;#39;) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; place x tp&lt;/span&gt;
&lt;span id=&quot;cb2-12&quot;&gt;&lt;a href=&quot;#cb2-12&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    players  &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;ot&quot;&gt;`mod`&lt;/span&gt; numPlayers) &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; [&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;..&lt;/span&gt;]&lt;/span&gt;
&lt;span id=&quot;cb2-13&quot;&gt;&lt;a href=&quot;#cb2-13&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    toInsert &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;..&lt;/span&gt;maxPiece]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And that’s it! The answer is just the maximal score in the final score vector:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb3&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb3-1&quot;&gt;&lt;a href=&quot;#cb3-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;day09a ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-2&quot;&gt;&lt;a href=&quot;#cb3-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;day09a numPlayers maxPiece &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; V.maximum (run numPlayers maxPiece)&lt;/span&gt;
&lt;span id=&quot;cb3-3&quot;&gt;&lt;a href=&quot;#cb3-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-4&quot;&gt;&lt;a href=&quot;#cb3-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;day09b ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-5&quot;&gt;&lt;a href=&quot;#cb3-5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;day09b numPlayers maxPiece &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; V.maximum (run numPlayers (maxPiece &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;From this naive implementation, Part 1 takes 56.ms, and Part 2 takes 4.5s.&lt;/p&gt;
&lt;h3 id=&quot;day-9-benchmarks&quot;&gt;Day 9 Benchmarks&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt; Day 09a
benchmarking...
time                 47.19 ms   (45.15 ms .. 48.84 ms)
                     0.994 R²   (0.984 R² .. 0.999 R²)
mean                 47.45 ms   (46.40 ms .. 48.65 ms)
std dev              2.096 ms   (1.673 ms .. 2.757 ms)
variance introduced by outliers: 13% (moderately inflated)

* parsing and formatting times excluded

&amp;gt;&amp;gt; Day 09b
benchmarking...
time                 4.496 s    (4.244 s .. NaN s)
                     0.999 R²   (0.998 R² .. 1.000 R²)
mean                 4.759 s    (4.636 s .. 4.882 s)
std dev              144.1 ms   (118.0 ms .. 166.1 ms)
variance introduced by outliers: 19% (moderately inflated)

* parsing and formatting times excluded&lt;/code&gt;&lt;/pre&gt;
</description>
      <link>https://github.com/mstksg/advent-of-code-2018/blob/master/reflections.md#day-9</link>
      <pubDate>Sun,  9 Dec 2018 01:00:00 EST</pubDate>
    </item>

    <item>
      <title>Day 8</title>
      <description>&lt;h2 id=&quot;day-8&quot;&gt;Day 8&lt;/h2&gt;
&lt;!--
This section is generated and compiled by the build script at ./Build.hs from
the file `./reflections/day08.md`.  If you want to edit this, edit
that file instead!
--&gt;
&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://adventofcode.com/2018/day/8&quot;&gt;Prompt&lt;/a&gt;&lt;/em&gt; / &lt;em&gt;&lt;a href=&quot;https://github.com/mstksg/advent-of-code-2018/blob/master/src/AOC/Challenge/Day08.hs&quot;&gt;Code&lt;/a&gt;&lt;/em&gt; / &lt;em&gt;&lt;a href=&quot;https://mstksg.github.io/advent-of-code-2018/src/AOC.Challenge.Day08.html&quot;&gt;Rendered&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Another nice one for Haskell! We’re just parsing a stream of &lt;code&gt;Int&lt;/code&gt;s here :)&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb1&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb1-1&quot;&gt;&lt;a href=&quot;#cb1-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;qualified&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Text.Parsec&lt;/span&gt;    &lt;span class=&quot;kw&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;P&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-2&quot;&gt;&lt;a href=&quot;#cb1-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-3&quot;&gt;&lt;a href=&quot;#cb1-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;P.Parsec&lt;/span&gt; [&lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;] ()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;with a &lt;code&gt;Parsec [Int] ()&lt;/code&gt;, it means that our “tokens” are &lt;code&gt;Int&lt;/code&gt;. That means &lt;code&gt;P.anyToken :: Parser Int&lt;/code&gt; will pop the next &lt;code&gt;Int&lt;/code&gt; from the stream.&lt;/p&gt;
&lt;p&gt;Our Day 1 will be the &lt;code&gt;sum1&lt;/code&gt;, which will parse a stream of &lt;code&gt;Int&lt;/code&gt;s into the sum of all the metadatas.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb2&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb2-1&quot;&gt;&lt;a href=&quot;#cb2-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;sum1 ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-2&quot;&gt;&lt;a href=&quot;#cb2-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;sum1 &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-3&quot;&gt;&lt;a href=&quot;#cb2-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    numChild &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; P.anyToken&lt;/span&gt;
&lt;span id=&quot;cb2-4&quot;&gt;&lt;a href=&quot;#cb2-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    numMeta  &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; P.anyToken&lt;/span&gt;
&lt;span id=&quot;cb2-5&quot;&gt;&lt;a href=&quot;#cb2-5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    childs   &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; replicateM numChild sum1&lt;/span&gt;
&lt;span id=&quot;cb2-6&quot;&gt;&lt;a href=&quot;#cb2-6&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    metas    &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; replicateM numMeta  P.anyToken&lt;/span&gt;
&lt;span id=&quot;cb2-7&quot;&gt;&lt;a href=&quot;#cb2-7&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; childs &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; metas&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And so part 1 is:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb3&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb3-1&quot;&gt;&lt;a href=&quot;#cb3-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;day01a ::&lt;/span&gt; [&lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;] &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-2&quot;&gt;&lt;a href=&quot;#cb3-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;day01a xs &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; fromRight &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; P.parse sum1 &lt;span class=&quot;st&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Part 2 is similar. Again, we parse a stream of ints into a sum:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sum2 :: Parser Int
sum2 = do
    numChild &amp;lt;- P.anyToken
    numMeta  &amp;lt;- P.anyToken
    childs   &amp;lt;- replicateM numChild sum2
    metas    &amp;lt;- replicateM numMeta  P.anyToken
    pure $ if null childs
      then sum metas
      else sum . mapMaybe (\i -&amp;gt; childs ^? ix (i - 1)) $ metas&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I’m using &lt;code&gt;xs ^? ix i&lt;/code&gt; (from lens) as a “safe indexing”, that returns &lt;code&gt;Maybe a&lt;/code&gt;. We need to remember to index into &lt;code&gt;i - 1&lt;/code&gt; because our indexing starts at one!&lt;/p&gt;
&lt;p&gt;And so part 2 is:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb5&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb5-1&quot;&gt;&lt;a href=&quot;#cb5-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;day02a ::&lt;/span&gt; [&lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;] &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-2&quot;&gt;&lt;a href=&quot;#cb5-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;day02a &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; fromRight &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; P.parse sum1 &lt;span class=&quot;st&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can get a list of &lt;code&gt;[Int]&lt;/code&gt; from a string input using &lt;code&gt;map read . words&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;day-8-benchmarks&quot;&gt;Day 8 Benchmarks&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt; Day 08a
benchmarking...
time                 4.896 ms   (4.671 ms .. 5.189 ms)
                     0.985 R²   (0.976 R² .. 0.999 R²)
mean                 4.742 ms   (4.664 ms .. 4.887 ms)
std dev              296.9 μs   (147.8 μs .. 467.3 μs)
variance introduced by outliers: 38% (moderately inflated)

* parsing and formatting times excluded

&amp;gt;&amp;gt; Day 08b
benchmarking...
time                 1.861 ms   (1.821 ms .. 1.900 ms)
                     0.995 R²   (0.993 R² .. 0.997 R²)
mean                 1.846 ms   (1.817 ms .. 1.898 ms)
std dev              131.9 μs   (89.68 μs .. 219.3 μs)
variance introduced by outliers: 53% (severely inflated)

* parsing and formatting times excluded&lt;/code&gt;&lt;/pre&gt;
</description>
      <link>https://github.com/mstksg/advent-of-code-2018/blob/master/reflections.md#day-8</link>
      <pubDate>Sat,  8 Dec 2018 01:00:00 EST</pubDate>
    </item>

    <item>
      <title>Day 6</title>
      <description>&lt;h2 id=&quot;day-6&quot;&gt;Day 6&lt;/h2&gt;
&lt;!--
This section is generated and compiled by the build script at ./Build.hs from
the file `./reflections/day06.md`.  If you want to edit this, edit
that file instead!
--&gt;
&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://adventofcode.com/2018/day/6&quot;&gt;Prompt&lt;/a&gt;&lt;/em&gt; / &lt;em&gt;&lt;a href=&quot;https://github.com/mstksg/advent-of-code-2018/blob/master/src/AOC/Challenge/Day06.hs&quot;&gt;Code&lt;/a&gt;&lt;/em&gt; / &lt;em&gt;&lt;a href=&quot;https://mstksg.github.io/advent-of-code-2018/src/AOC.Challenge.Day06.html&quot;&gt;Rendered&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Day 6 Part 1 has us build a &lt;a href=&quot;https://en.wikipedia.org/wiki/Voronoi_diagram&quot;&gt;Voronoi Diagram&lt;/a&gt;, and inspect properties of it. Again, it’s all very functional already, since we just need, basically:&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;A function to get a voronoi diagram from a set of points&lt;/li&gt;
&lt;li&gt;A function to query the diagram for properties we care about&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Along the way, types will help us write our programs, because we constantly will be asking the compiler for “what could go here” sort of things; it’ll also prevent us from putting the wrong pieces together!&lt;/p&gt;
&lt;p&gt;We’re going to leverage the &lt;em&gt;[linear][]&lt;/em&gt; library again, for its &lt;code&gt;V2 Int&lt;/code&gt; type for our points. It has a very useful &lt;code&gt;Num&lt;/code&gt; and &lt;code&gt;Foldable&lt;/code&gt; instance, which we can use to write our &lt;code&gt;distance&lt;/code&gt; function:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb1&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb1-1&quot;&gt;&lt;a href=&quot;#cb1-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;V2&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-2&quot;&gt;&lt;a href=&quot;#cb1-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-3&quot;&gt;&lt;a href=&quot;#cb1-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;distance ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-4&quot;&gt;&lt;a href=&quot;#cb1-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;distance x y &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;abs&lt;/span&gt; (x &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; y)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We’re going to be representing our voronoi diagram using a &lt;code&gt;Map Point Point&lt;/code&gt;: a map of points to the location of the “Site” they are assigned to.&lt;/p&gt;
&lt;p&gt;We can generate such a map by getting a &lt;code&gt;Set Point&lt;/code&gt; (a set of all points within our area of interest) and using &lt;code&gt;M.fromSet :: (Point -&amp;gt; Point) -&amp;gt; Set Point -&amp;gt; Map Point Point&lt;/code&gt;, to assign a Site to each point.&lt;/p&gt;
&lt;p&gt;First, we build a bounding box so don’t need to generate an infinite map. The &lt;code&gt;boundingBox&lt;/code&gt; function will take a non-empty list of points (from &lt;code&gt;Data.List.NonEmpty&lt;/code&gt;) and return a &lt;code&gt;V2 Point&lt;/code&gt;, which the lower-left and upper-right corners of our bounding box.&lt;/p&gt;
&lt;p&gt;We need to iterate through the whole list and accumulate the minimum and maximums of x and y. We can do it all in one pass by taking advantage of the &lt;code&gt;(Semigroup a, Semigroup b) =&amp;gt; Semigroup (a, b)&lt;/code&gt; instance, the &lt;code&gt;Min&lt;/code&gt; and &lt;code&gt;Max&lt;/code&gt; newtype wrappers to give us the appropriate semigroups, and using &lt;code&gt;foldMap1 :: Semigroup m =&amp;gt; (a -&amp;gt; m) -&amp;gt; NonEmpty a -&amp;gt; m&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb2&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb2-1&quot;&gt;&lt;a href=&quot;#cb2-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt;           &lt;span class=&quot;dt&quot;&gt;Data.List.NonEmpty&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;NonEmpty&lt;/span&gt;(..))&lt;/span&gt;
&lt;span id=&quot;cb2-2&quot;&gt;&lt;a href=&quot;#cb2-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt;           &lt;span class=&quot;dt&quot;&gt;Data.Semigroup.Foldable&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-3&quot;&gt;&lt;a href=&quot;#cb2-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-4&quot;&gt;&lt;a href=&quot;#cb2-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Box&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;V2&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Point&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-5&quot;&gt;&lt;a href=&quot;#cb2-5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-6&quot;&gt;&lt;a href=&quot;#cb2-6&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;boundingBox ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;NonEmpty&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Box&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-7&quot;&gt;&lt;a href=&quot;#cb2-7&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;boundingBox ps &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;V2&lt;/span&gt; xMin yMin &lt;span class=&quot;ot&quot;&gt;`V2`&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;V2&lt;/span&gt; xMax yMax&lt;/span&gt;
&lt;span id=&quot;cb2-8&quot;&gt;&lt;a href=&quot;#cb2-8&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-9&quot;&gt;&lt;a href=&quot;#cb2-9&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    (&lt;span class=&quot;dt&quot;&gt;Min&lt;/span&gt; xMin, &lt;span class=&quot;dt&quot;&gt;Min&lt;/span&gt; yMin, &lt;span class=&quot;dt&quot;&gt;Max&lt;/span&gt; xMax, &lt;span class=&quot;dt&quot;&gt;Max&lt;/span&gt; yMax) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;flip&lt;/span&gt; foldMap1 ps &lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; \(&lt;span class=&quot;dt&quot;&gt;V2&lt;/span&gt; x y) &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-10&quot;&gt;&lt;a href=&quot;#cb2-10&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        (&lt;span class=&quot;dt&quot;&gt;Min&lt;/span&gt; x, &lt;span class=&quot;dt&quot;&gt;Min&lt;/span&gt; y, &lt;span class=&quot;dt&quot;&gt;Max&lt;/span&gt; x, &lt;span class=&quot;dt&quot;&gt;Max&lt;/span&gt; y)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(Note that we can just use &lt;code&gt;foldMap&lt;/code&gt;, because &lt;code&gt;Min&lt;/code&gt; and &lt;code&gt;Max&lt;/code&gt; have a &lt;code&gt;Monoid&lt;/code&gt; instance because &lt;code&gt;Int&lt;/code&gt; is bounded. But that’s no fun! And besides, what if we had used &lt;code&gt;Integer&lt;/code&gt;?)&lt;/p&gt;
&lt;p&gt;(Also note that this could potentially blow up the stack, because tuples in Haskell are lazy. If we cared about performance, we’d use a strict tuple type instead of the lazy tuple. In this case, since we only have on the order of a few thousand points, it’s not a huge deal)&lt;/p&gt;
&lt;p&gt;Next, we write a function that, given a non-empty set of sites and a point we wish to label, return the label (site location) of that point.&lt;/p&gt;
&lt;p&gt;We do this by making a &lt;code&gt;NonEmpty (Point, Int)&lt;/code&gt; &lt;code&gt;dists&lt;/code&gt; that pair up sites to the distance between that site and the point.&lt;/p&gt;
&lt;p&gt;We need now to find the &lt;em&gt;minimum&lt;/em&gt; distance in that &lt;code&gt;NonEmpty&lt;/code&gt;. But not only that, we need to find the &lt;em&gt;unique&lt;/em&gt; minimum, or return &lt;code&gt;Nothing&lt;/code&gt; if we don’t have a unique minimum.&lt;/p&gt;
&lt;p&gt;To do this, we can use &lt;code&gt;NE.head . NE.groupWith1 snd . NE.sortWith snd&lt;/code&gt;. This will sort the &lt;code&gt;NonEmpty&lt;/code&gt; on the second item (the distance &lt;code&gt;Int&lt;/code&gt;), which puts all of the minimal distances in the front. &lt;code&gt;NE.groupWith1 snd&lt;/code&gt; will then group together the pairs with matching distances, moving all of the minimal distance to the first item in the list. Then we use the total &lt;code&gt;NE.head&lt;/code&gt; to get the first item: the non-empty list with the minimal distances.&lt;/p&gt;
&lt;p&gt;Then we can pattern match on &lt;code&gt;(closestSite, minDist) :| []&lt;/code&gt; to prove that this “first list” has exactly one item, so the minimum is unique.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb3&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb3-1&quot;&gt;&lt;a href=&quot;#cb3-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;labelVoronoi&lt;/span&gt;
&lt;span id=&quot;cb3-2&quot;&gt;&lt;a href=&quot;#cb3-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;    ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;NonEmpty&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Point&lt;/span&gt;     &lt;span class=&quot;co&quot;&gt;-- ^ set of sites&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-3&quot;&gt;&lt;a href=&quot;#cb3-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Point&lt;/span&gt;              &lt;span class=&quot;co&quot;&gt;-- ^ point to label&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-4&quot;&gt;&lt;a href=&quot;#cb3-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Maybe&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Point&lt;/span&gt;        &lt;span class=&quot;co&quot;&gt;-- ^ the label, if unique&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-5&quot;&gt;&lt;a href=&quot;#cb3-5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;labelVoronoi sites p &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-6&quot;&gt;&lt;a href=&quot;#cb3-6&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    (closestSite, _) &lt;span class=&quot;op&quot;&gt;:|&lt;/span&gt; [] &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-7&quot;&gt;&lt;a href=&quot;#cb3-7&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;                            &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; NE.head&lt;/span&gt;
&lt;span id=&quot;cb3-8&quot;&gt;&lt;a href=&quot;#cb3-8&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;                            &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; NE.groupWith1 &lt;span class=&quot;fu&quot;&gt;snd&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-9&quot;&gt;&lt;a href=&quot;#cb3-9&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;                            &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; NE.sortWith &lt;span class=&quot;fu&quot;&gt;snd&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-10&quot;&gt;&lt;a href=&quot;#cb3-10&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;                            &lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; dists&lt;/span&gt;
&lt;span id=&quot;cb3-11&quot;&gt;&lt;a href=&quot;#cb3-11&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; closestSite&lt;/span&gt;
&lt;span id=&quot;cb3-12&quot;&gt;&lt;a href=&quot;#cb3-12&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-13&quot;&gt;&lt;a href=&quot;#cb3-13&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    dists                  &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; sites &lt;span class=&quot;op&quot;&gt;&amp;lt;&amp;amp;&amp;gt;&lt;/span&gt; \site &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; (site, distance p site)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once we have our voronoi diagram &lt;code&gt;Map Point Point&lt;/code&gt; (map of points to nearest-site locations), we can use our &lt;code&gt;freqs :: [Point] -&amp;gt; Map Point Int&lt;/code&gt; function that we’ve used many times to get a &lt;code&gt;Map Point Int&lt;/code&gt;, or a map from Site points to Frequencies — essentially a map of Sites to the total area of the cells assigned to them. The problem asks us what the size of the largest cell is, so that’s the same as asking for the largest frequency, &lt;code&gt;maximum&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb4&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb4-1&quot;&gt;&lt;a href=&quot;#cb4-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;queryVoronoi ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Map&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb4-2&quot;&gt;&lt;a href=&quot;#cb4-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;queryVeronoi &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;maximum&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; freqs &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; M.elems&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;One caveat: we need to ignore cells that are “infinite”. To that we can create the set of all Sitse that touch the border, and then filter out all points in the map that are associated with a Site that touches the border.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb5&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb5-1&quot;&gt;&lt;a href=&quot;#cb5-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;cleanVoronoi ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Box&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Map&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Map&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Point&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-2&quot;&gt;&lt;a href=&quot;#cb5-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;cleanVoronoi (&lt;span class=&quot;dt&quot;&gt;V2&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;V2&lt;/span&gt; xMin yMin) (&lt;span class=&quot;dt&quot;&gt;V2&lt;/span&gt; xMax yMax)) voronoi &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-3&quot;&gt;&lt;a href=&quot;#cb5-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;                  M.filter (&lt;span class=&quot;ot&quot;&gt;`S.notMember`&lt;/span&gt; edges) voronoi&lt;/span&gt;
&lt;span id=&quot;cb5-4&quot;&gt;&lt;a href=&quot;#cb5-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-5&quot;&gt;&lt;a href=&quot;#cb5-5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    edges &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; S.fromList&lt;/span&gt;
&lt;span id=&quot;cb5-6&quot;&gt;&lt;a href=&quot;#cb5-6&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;          &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; mapMaybe (\(point, site) &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; site &lt;span class=&quot;op&quot;&gt;&amp;lt;$&lt;/span&gt; guard (onEdge point))&lt;/span&gt;
&lt;span id=&quot;cb5-7&quot;&gt;&lt;a href=&quot;#cb5-7&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;          &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; M.toList&lt;/span&gt;
&lt;span id=&quot;cb5-8&quot;&gt;&lt;a href=&quot;#cb5-8&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;          &lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; voronoi&lt;/span&gt;
&lt;span id=&quot;cb5-9&quot;&gt;&lt;a href=&quot;#cb5-9&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    onEdge (&lt;span class=&quot;dt&quot;&gt;V2&lt;/span&gt; x y) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;or&lt;/span&gt; [ x &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; xMin, x &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; xMax, y &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; yMin, y &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; yMax ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We turn &lt;code&gt;edges&lt;/code&gt; into a &lt;code&gt;Set&lt;/code&gt; (instead of just a list) because of the fast &lt;code&gt;S.notMember&lt;/code&gt; function, to check if a Site ID is in the set of edge-touching ID’s.&lt;/p&gt;
&lt;p&gt;Finally, we need to get a function from a bounding box &lt;code&gt;Box&lt;/code&gt; to &lt;code&gt;[Point]&lt;/code&gt;: all of the points in that bounding box. Luckily, this is exactly what the &lt;code&gt;Ix&lt;/code&gt; instance of &lt;code&gt;V2 Int&lt;/code&gt; gets us:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb6&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb6-1&quot;&gt;&lt;a href=&quot;#cb6-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;qualified&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Data.Ix&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Ix&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-2&quot;&gt;&lt;a href=&quot;#cb6-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-3&quot;&gt;&lt;a href=&quot;#cb6-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;bbPoints ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Box&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; [&lt;span class=&quot;dt&quot;&gt;Point&lt;/span&gt;]&lt;/span&gt;
&lt;span id=&quot;cb6-4&quot;&gt;&lt;a href=&quot;#cb6-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;bbPoints (&lt;span class=&quot;dt&quot;&gt;V2&lt;/span&gt; mins maxs) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Ix&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;fu&quot;&gt;range&lt;/span&gt; (mins, maxs)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And so Part 1 is:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb7&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb7-1&quot;&gt;&lt;a href=&quot;#cb7-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;day06a ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;NonEmpty&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-2&quot;&gt;&lt;a href=&quot;#cb7-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;day06a sites &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; queryVoronoi cleaned&lt;/span&gt;
&lt;span id=&quot;cb7-3&quot;&gt;&lt;a href=&quot;#cb7-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-4&quot;&gt;&lt;a href=&quot;#cb7-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    bb      &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; boundingBox sites&lt;/span&gt;
&lt;span id=&quot;cb7-5&quot;&gt;&lt;a href=&quot;#cb7-5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    voronoi &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; catMaybes&lt;/span&gt;
&lt;span id=&quot;cb7-6&quot;&gt;&lt;a href=&quot;#cb7-6&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; M.fromSet (labelVoronoi sites)&lt;/span&gt;
&lt;span id=&quot;cb7-7&quot;&gt;&lt;a href=&quot;#cb7-7&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; S.fromList&lt;/span&gt;
&lt;span id=&quot;cb7-8&quot;&gt;&lt;a href=&quot;#cb7-8&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; bbPoints bb&lt;/span&gt;
&lt;span id=&quot;cb7-9&quot;&gt;&lt;a href=&quot;#cb7-9&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    cleaned &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; cleanVoronoi bb voronoi&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Basically, a series of somewhat complex queries (translated straight from the prompt) on a voronoi diagram generated by a set of points.&lt;/p&gt;
&lt;p&gt;Part 2 is much simpler; it’s just filtering for all the points that have a given function, and then counting how many points there are.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb8&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb8-1&quot;&gt;&lt;a href=&quot;#cb8-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;day06b ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;NonEmpty&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb8-2&quot;&gt;&lt;a href=&quot;#cb8-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;day06b sites &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;length&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb8-3&quot;&gt;&lt;a href=&quot;#cb8-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;             &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;filter&lt;/span&gt; ((&lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;10000&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; totalDist)&lt;/span&gt;
&lt;span id=&quot;cb8-4&quot;&gt;&lt;a href=&quot;#cb8-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;             &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; bbPoints&lt;/span&gt;
&lt;span id=&quot;cb8-5&quot;&gt;&lt;a href=&quot;#cb8-5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;             &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; boundingBox&lt;/span&gt;
&lt;span id=&quot;cb8-6&quot;&gt;&lt;a href=&quot;#cb8-6&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;             &lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; sites&lt;/span&gt;
&lt;span id=&quot;cb8-7&quot;&gt;&lt;a href=&quot;#cb8-7&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb8-8&quot;&gt;&lt;a href=&quot;#cb8-8&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    totalDist p &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; distance p &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; sites&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;Get the bounding box with &lt;code&gt;boundingBox&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Generate all of the points in that bounding box with &lt;code&gt;bbPoints&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Filter those points for just those where their &lt;code&gt;totalDist&lt;/code&gt; is less than 10000&lt;/li&gt;
&lt;li&gt;Find the number of such points&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Another situation where the Part 2 is much simpler than Part 1 :)&lt;/p&gt;
&lt;p&gt;Our parser isn’t too complicated; it’s similar to the parsers from the previous parts:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb9&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb9-1&quot;&gt;&lt;a href=&quot;#cb9-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;parseLine ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Maybe&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Point&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb9-2&quot;&gt;&lt;a href=&quot;#cb9-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;parseLine &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; (packUp &lt;span class=&quot;op&quot;&gt;=&amp;lt;&amp;lt;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb9-3&quot;&gt;&lt;a href=&quot;#cb9-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;          &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;traverse&lt;/span&gt; readMaybe&lt;/span&gt;
&lt;span id=&quot;cb9-4&quot;&gt;&lt;a href=&quot;#cb9-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;          &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;words&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb9-5&quot;&gt;&lt;a href=&quot;#cb9-5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;          &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; clearOut (&lt;span class=&quot;fu&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;isDigit&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb9-6&quot;&gt;&lt;a href=&quot;#cb9-6&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb9-7&quot;&gt;&lt;a href=&quot;#cb9-7&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    packUp [x,y] &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;V2&lt;/span&gt; x y&lt;/span&gt;
&lt;span id=&quot;cb9-8&quot;&gt;&lt;a href=&quot;#cb9-8&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    packUp _     &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Nothing&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;day-6-benchmarks&quot;&gt;Day 6 Benchmarks&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt; Day 06a
benchmarking...
time                 308.2 ms   (263.4 ms .. 354.3 ms)
                     0.992 R²   (0.958 R² .. 1.000 R²)
mean                 322.7 ms   (304.4 ms .. 335.7 ms)
std dev              19.37 ms   (10.26 ms .. 25.96 ms)
variance introduced by outliers: 17% (moderately inflated)

* parsing and formatting times excluded

&amp;gt;&amp;gt; Day 06b
benchmarking...
time                 99.82 ms   (94.04 ms .. 106.8 ms)
                     0.991 R²   (0.968 R² .. 1.000 R²)
mean                 93.48 ms   (87.76 ms .. 98.76 ms)
std dev              8.725 ms   (5.895 ms .. 12.41 ms)
variance introduced by outliers: 31% (moderately inflated)

* parsing and formatting times excluded&lt;/code&gt;&lt;/pre&gt;
</description>
      <link>https://github.com/mstksg/advent-of-code-2018/blob/master/reflections.md#day-6</link>
      <pubDate>Thu,  6 Dec 2018 01:00:00 EST</pubDate>
    </item>

    <item>
      <title>Day 5</title>
      <description>&lt;h2 id=&quot;day-5&quot;&gt;Day 5&lt;/h2&gt;
&lt;!--
This section is generated and compiled by the build script at ./Build.hs from
the file `./reflections/day05.md`.  If you want to edit this, edit
that file instead!
--&gt;
&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://adventofcode.com/2018/day/5&quot;&gt;Prompt&lt;/a&gt;&lt;/em&gt; / &lt;em&gt;&lt;a href=&quot;https://github.com/mstksg/advent-of-code-2018/blob/master/src/AOC/Challenge/Day05.hs&quot;&gt;Code&lt;/a&gt;&lt;/em&gt; / &lt;em&gt;&lt;a href=&quot;https://mstksg.github.io/advent-of-code-2018/src/AOC.Challenge.Day05.html&quot;&gt;Rendered&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;My write-up for this is actually [on my blog, here][d05b]!&lt;/strong&gt; It involves my group theory/free group/group homomorphism based solution. That’s my main reflection, but I also had a method that I wrote &lt;em&gt;before&lt;/em&gt;, that I would still like to preserve.&lt;/p&gt;
&lt;p&gt;So, preserved here was my original solution involving &lt;code&gt;funkcyCons&lt;/code&gt; and &lt;code&gt;foldr&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;One of the first higher-order functions you learn about in Haskill is &lt;code&gt;foldr&lt;/code&gt;, which is like a “skeleton transformation” of a list.&lt;/p&gt;
&lt;p&gt;That’s because in Haskell, a (linked) list is one of two constructors: nil (&lt;code&gt;[]&lt;/code&gt;) or cons (&lt;code&gt;:&lt;/code&gt;). The list &lt;code&gt;[1,2,3]&lt;/code&gt; is really &lt;code&gt;1:(2:(3:[]))&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;foldr f z&lt;/code&gt; is a function that takes a list replaces all &lt;code&gt;:&lt;/code&gt;s with &lt;code&gt;f&lt;/code&gt;, and &lt;code&gt;[]&lt;/code&gt;s with &lt;code&gt;z&lt;/code&gt;s:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb1&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb1-1&quot;&gt;&lt;a href=&quot;#cb1-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;          [&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;] &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;  (&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;  (&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;  &lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;  []))&lt;/span&gt;
&lt;span id=&quot;cb1-2&quot;&gt;&lt;a href=&quot;#cb1-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;fu&quot;&gt;foldr&lt;/span&gt; f z [&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;] &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;`f`&lt;/span&gt; (&lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;`f`&lt;/span&gt; (&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;`f`&lt;/span&gt; z ))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This leads to one of the most famous identities in Haskell: &lt;code&gt;foldr (:) [] xs = xs&lt;/code&gt;. That’s because if we go in and replace all &lt;code&gt;(:)&lt;/code&gt;s with &lt;code&gt;(:)&lt;/code&gt;, and replace all &lt;code&gt;[]&lt;/code&gt;s with &lt;code&gt;[]&lt;/code&gt;… we get back the original list!&lt;/p&gt;
&lt;p&gt;But something we can also do is give &lt;code&gt;foldr&lt;/code&gt; a “custom cons”. A custom cons that will go in place of the normal cons.&lt;/p&gt;
&lt;p&gt;This problem is well-suited for such a custom cons: instead of normal &lt;code&gt;(:)&lt;/code&gt;, we’ll write a custom cons that respects the rules of reaction: we can’t have two “anti-letters” next to each other:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb2&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb2-1&quot;&gt;&lt;a href=&quot;#cb2-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;anti ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Char&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Char&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Bool&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-2&quot;&gt;&lt;a href=&quot;#cb2-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;anti x y &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;toLower&lt;/span&gt; x &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;toLower&lt;/span&gt; y &lt;span class=&quot;op&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; x &lt;span class=&quot;op&quot;&gt;/=&lt;/span&gt; y&lt;/span&gt;
&lt;span id=&quot;cb2-3&quot;&gt;&lt;a href=&quot;#cb2-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-4&quot;&gt;&lt;a href=&quot;#cb2-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;funkyCons ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Char&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-5&quot;&gt;&lt;a href=&quot;#cb2-5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;x &lt;span class=&quot;ot&quot;&gt;`funkyCons`&lt;/span&gt; (y&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;xs)&lt;/span&gt;
&lt;span id=&quot;cb2-6&quot;&gt;&lt;a href=&quot;#cb2-6&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;op&quot;&gt;|&lt;/span&gt; anti x y  &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; xs&lt;/span&gt;
&lt;span id=&quot;cb2-7&quot;&gt;&lt;a href=&quot;#cb2-7&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;op&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;otherwise&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; x&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;y&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;xs&lt;/span&gt;
&lt;span id=&quot;cb2-8&quot;&gt;&lt;a href=&quot;#cb2-8&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;x &lt;span class=&quot;ot&quot;&gt;`funkyCons`&lt;/span&gt; []     &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; [x]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So, &lt;code&gt;foldr funkyCons []&lt;/code&gt; will go through a list and replace all &lt;code&gt;(:)&lt;/code&gt; (cons) with &lt;code&gt;funkyCons&lt;/code&gt;, which will “bubble up” the reaction.&lt;/p&gt;
&lt;p&gt;So, that’s just the entire part 1!&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb3&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb3-1&quot;&gt;&lt;a href=&quot;#cb3-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;day05a ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-2&quot;&gt;&lt;a href=&quot;#cb3-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;day05a &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;foldr&lt;/span&gt; funkyCons []&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For part 2 we can just find the minimum length after trying out every character.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb4&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb4-1&quot;&gt;&lt;a href=&quot;#cb4-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;day05b ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb4-2&quot;&gt;&lt;a href=&quot;#cb4-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;day05b xs &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;minimum&lt;/span&gt; [ &lt;span class=&quot;fu&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;foldr&lt;/span&gt; funkyCons [] (remove c xs)&lt;/span&gt;
&lt;span id=&quot;cb4-3&quot;&gt;&lt;a href=&quot;#cb4-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;                    &lt;span class=&quot;op&quot;&gt;|&lt;/span&gt; c &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; [&lt;span class=&quot;ch&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;ch&quot;&gt;&amp;#39;z&amp;#39;&lt;/span&gt;]&lt;/span&gt;
&lt;span id=&quot;cb4-4&quot;&gt;&lt;a href=&quot;#cb4-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;                    ]&lt;/span&gt;
&lt;span id=&quot;cb4-5&quot;&gt;&lt;a href=&quot;#cb4-5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb4-6&quot;&gt;&lt;a href=&quot;#cb4-6&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    remove c &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;filter&lt;/span&gt; ((&lt;span class=&quot;op&quot;&gt;/=&lt;/span&gt; c) &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;toLower&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(Note that in the actual input, there is a trailing newline, so in practice we have to strip it from the input.)&lt;/p&gt;
&lt;h3 id=&quot;day-5-benchmarks&quot;&gt;Day 5 Benchmarks&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt; Day 05a
benchmarking...
time                 19.17 ms   (18.71 ms .. 19.63 ms)
                     0.997 R²   (0.994 R² .. 0.999 R²)
mean                 19.36 ms   (19.09 ms .. 19.77 ms)
std dev              831.6 μs   (621.9 μs .. 1.205 ms)
variance introduced by outliers: 13% (moderately inflated)

&amp;gt;&amp;gt; Day 05b
benchmarking...
time                 83.90 ms   (81.79 ms .. 90.30 ms)
                     0.996 R²   (0.989 R² .. 1.000 R²)
mean                 85.52 ms   (84.41 ms .. 87.60 ms)
std dev              2.376 ms   (1.389 ms .. 3.438 ms)&lt;/code&gt;&lt;/pre&gt;
</description>
      <link>https://github.com/mstksg/advent-of-code-2018/blob/master/reflections.md#day-5</link>
      <pubDate>Wed,  5 Dec 2018 01:00:00 EST</pubDate>
    </item>

    <item>
      <title>Day 4</title>
      <description>&lt;h2 id=&quot;day-4&quot;&gt;Day 4&lt;/h2&gt;
&lt;!--
This section is generated and compiled by the build script at ./Build.hs from
the file `./reflections/day04.md`.  If you want to edit this, edit
that file instead!
--&gt;
&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://adventofcode.com/2018/day/4&quot;&gt;Prompt&lt;/a&gt;&lt;/em&gt; / &lt;em&gt;&lt;a href=&quot;https://github.com/mstksg/advent-of-code-2018/blob/master/src/AOC/Challenge/Day04.hs&quot;&gt;Code&lt;/a&gt;&lt;/em&gt; / &lt;em&gt;&lt;a href=&quot;https://mstksg.github.io/advent-of-code-2018/src/AOC.Challenge.Day04.html&quot;&gt;Rendered&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Day 4 was fun because it’s something that, on the surface, sounds like it requires a state machine to run through a stateful log and accumulate a bunch of time sheets.&lt;/p&gt;
&lt;p&gt;However, if we think of the log as just a stream of tokens, we can look at at it as &lt;em&gt;parsing&lt;/em&gt; this stream of tokens into time sheets – no state or mutation required.&lt;/p&gt;
&lt;p&gt;First, the types at play:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb1&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb1-1&quot;&gt;&lt;a href=&quot;#cb1-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Minute&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Finite&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;60&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-2&quot;&gt;&lt;a href=&quot;#cb1-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-3&quot;&gt;&lt;a href=&quot;#cb1-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;TimeCard&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Map&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Minute&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-4&quot;&gt;&lt;a href=&quot;#cb1-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-5&quot;&gt;&lt;a href=&quot;#cb1-5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Time&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;T&lt;/span&gt; {&lt;span class=&quot;ot&quot;&gt; _tYear   ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Integer&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-6&quot;&gt;&lt;a href=&quot;#cb1-6&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;              ,&lt;span class=&quot;ot&quot;&gt; _tMonth  ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Integer&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-7&quot;&gt;&lt;a href=&quot;#cb1-7&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;              ,&lt;span class=&quot;ot&quot;&gt; _tDay    ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Integer&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-8&quot;&gt;&lt;a href=&quot;#cb1-8&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;              ,&lt;span class=&quot;ot&quot;&gt; _tHour   ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Finite&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;24&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-9&quot;&gt;&lt;a href=&quot;#cb1-9&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;              ,&lt;span class=&quot;ot&quot;&gt; _tMinute ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Minute&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-10&quot;&gt;&lt;a href=&quot;#cb1-10&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;              }&lt;/span&gt;
&lt;span id=&quot;cb1-11&quot;&gt;&lt;a href=&quot;#cb1-11&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;deriving&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Eq&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;Ord&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb1-12&quot;&gt;&lt;a href=&quot;#cb1-12&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-13&quot;&gt;&lt;a href=&quot;#cb1-13&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;newtype&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Guard&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;G&lt;/span&gt; {&lt;span class=&quot;ot&quot;&gt; _gId ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt; }&lt;/span&gt;
&lt;span id=&quot;cb1-14&quot;&gt;&lt;a href=&quot;#cb1-14&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;deriving&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Eq&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;Ord&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb1-15&quot;&gt;&lt;a href=&quot;#cb1-15&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-16&quot;&gt;&lt;a href=&quot;#cb1-16&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Action&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;AShift&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Guard&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-17&quot;&gt;&lt;a href=&quot;#cb1-17&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;op&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;ASleep&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-18&quot;&gt;&lt;a href=&quot;#cb1-18&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;            &lt;span class=&quot;op&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;AWake&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that we have a bunch of “integer-like” quantities going on: the year/month/day/hour/minute, the guard ID, and the “frequency” in the &lt;code&gt;TimeCard&lt;/code&gt; frequency map. Just to help us accidentally not mix things up (like I personally did many times), we’ll make them all different types. A &lt;code&gt;Minute&lt;/code&gt; is a &lt;code&gt;Finite 60&lt;/code&gt; (&lt;code&gt;Finite 60&lt;/code&gt;, from the &lt;em&gt;finite-typelits&lt;/em&gt; library, is a type that is basically the integers limited from 0 to 59). Our hours are &lt;code&gt;Finite 24&lt;/code&gt;. Our Guard ID will be a newtype &lt;code&gt;Guard&lt;/code&gt;, just so we don’t accidentally mix it up with other types.&lt;/p&gt;
&lt;p&gt;Now, after parsing our input, we have a &lt;code&gt;Map Time Action&lt;/code&gt;: a map of times to actions committed at that time. The fact that we store it in a &lt;code&gt;Map&lt;/code&gt; ensures that the log items are ordered and unique.&lt;/p&gt;
&lt;p&gt;We now essentially want to parse a stream of &lt;code&gt;(Time, Action)&lt;/code&gt; pairs into a &lt;code&gt;Map Guard TimeCard&lt;/code&gt;: A map of &lt;code&gt;TimeCard&lt;/code&gt;s indexed by the guard that has that time card.&lt;/p&gt;
&lt;p&gt;To do that, we’ll use the &lt;em&gt;parsec&lt;/em&gt; library, which lets us parse over streams of arbitrary token type. Our parser type will take a &lt;code&gt;(Time, Action)&lt;/code&gt; stream:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb2&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb2-1&quot;&gt;&lt;a href=&quot;#cb2-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;qualified&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Text.Parsec&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;P&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-2&quot;&gt;&lt;a href=&quot;#cb2-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-3&quot;&gt;&lt;a href=&quot;#cb2-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Parser&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;P.Parsec&lt;/span&gt; [(&lt;span class=&quot;dt&quot;&gt;Time&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;Action&lt;/span&gt;)] ()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A &lt;code&gt;Parser Blah&lt;/code&gt; will be a parser that, given a stream of &lt;code&gt;(Time, Action)&lt;/code&gt; pairs, will aggregate them into a value of type &lt;code&gt;Blah&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Turning our stream into a &lt;code&gt;Map Guard TimeCard&lt;/code&gt; is now your standard run-of-the-mill parser combinator program.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb3&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb3-1&quot;&gt;&lt;a href=&quot;#cb3-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- | We define a nap as an `ASleep` action followed by an `AWake` action.  The&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-2&quot;&gt;&lt;a href=&quot;#cb3-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- result is a list of minutes slept.&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-3&quot;&gt;&lt;a href=&quot;#cb3-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;nap ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Parser&lt;/span&gt; [&lt;span class=&quot;dt&quot;&gt;Minute&lt;/span&gt;]&lt;/span&gt;
&lt;span id=&quot;cb3-4&quot;&gt;&lt;a href=&quot;#cb3-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;nap &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-5&quot;&gt;&lt;a href=&quot;#cb3-5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    (&lt;span class=&quot;dt&quot;&gt;T&lt;/span&gt; _ _ _ _ m0, &lt;span class=&quot;dt&quot;&gt;ASleep&lt;/span&gt;) &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; P.anyToken&lt;/span&gt;
&lt;span id=&quot;cb3-6&quot;&gt;&lt;a href=&quot;#cb3-6&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    (&lt;span class=&quot;dt&quot;&gt;T&lt;/span&gt; _ _ _ _ m1, &lt;span class=&quot;dt&quot;&gt;AWake&lt;/span&gt; ) &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; P.anyToken&lt;/span&gt;
&lt;span id=&quot;cb3-7&quot;&gt;&lt;a href=&quot;#cb3-7&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; [m0 &lt;span class=&quot;op&quot;&gt;..&lt;/span&gt; m1 &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;]     &lt;span class=&quot;co&quot;&gt;-- we can do this because m0 &amp;lt; m1 always in the&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-8&quot;&gt;&lt;a href=&quot;#cb3-8&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;                            &lt;span class=&quot;co&quot;&gt;--   input data.&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-9&quot;&gt;&lt;a href=&quot;#cb3-9&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-10&quot;&gt;&lt;a href=&quot;#cb3-10&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- | We define a a guard&amp;#39;s shift as a `AShift g` action, followed by&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-11&quot;&gt;&lt;a href=&quot;#cb3-11&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- &amp;quot;many&amp;quot; naps.  The result is a list of minutes slept along with the ID of the&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-12&quot;&gt;&lt;a href=&quot;#cb3-12&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- guard that slept them.&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-13&quot;&gt;&lt;a href=&quot;#cb3-13&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;guardShift ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Parser&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Guard&lt;/span&gt;, [&lt;span class=&quot;dt&quot;&gt;Minute&lt;/span&gt;])&lt;/span&gt;
&lt;span id=&quot;cb3-14&quot;&gt;&lt;a href=&quot;#cb3-14&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;guardShift &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-15&quot;&gt;&lt;a href=&quot;#cb3-15&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    (_, &lt;span class=&quot;dt&quot;&gt;AShift&lt;/span&gt; g) &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; P.anyToken&lt;/span&gt;
&lt;span id=&quot;cb3-16&quot;&gt;&lt;a href=&quot;#cb3-16&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    napMinutes    &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;concat&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; many (P.try nap)&lt;/span&gt;
&lt;span id=&quot;cb3-17&quot;&gt;&lt;a href=&quot;#cb3-17&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; (g, napMinutes)&lt;/span&gt;
&lt;span id=&quot;cb3-18&quot;&gt;&lt;a href=&quot;#cb3-18&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-19&quot;&gt;&lt;a href=&quot;#cb3-19&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- | A log stream is many guard shifts. The result is the accumulation of all&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-20&quot;&gt;&lt;a href=&quot;#cb3-20&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- of those shifts into a massive `Map Guard [Minute]` map, but turning all of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-21&quot;&gt;&lt;a href=&quot;#cb3-21&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- those [Minutes] into a frequency map instead by using `fmap freqs`.&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-22&quot;&gt;&lt;a href=&quot;#cb3-22&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;buildTimeCards ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Parser&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Map&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Guard&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;TimeCard&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb3-23&quot;&gt;&lt;a href=&quot;#cb3-23&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;buildTimeCards &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-24&quot;&gt;&lt;a href=&quot;#cb3-24&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    shifts &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; M.fromListWith (&lt;span class=&quot;op&quot;&gt;++&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; many guardShift&lt;/span&gt;
&lt;span id=&quot;cb3-25&quot;&gt;&lt;a href=&quot;#cb3-25&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; (&lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; freqs shifts)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We re-use the handy &lt;code&gt;freqs :: Ord a =&amp;gt; [a] -&amp;gt; Map a Int&lt;/code&gt; function, to build a frequency map, from Day 2.&lt;/p&gt;
&lt;p&gt;We can run a parser on our &lt;code&gt;[(Time, Action)]&lt;/code&gt; stream by using &lt;code&gt;P.parse :: Parser a -&amp;gt; [(Time, Action)] -&amp;gt; SourceName -&amp;gt; Either ParseError a&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The rest of the challenge involves “the X with the biggest Y” situations, which all boil down to “The key-value pair with the biggest &lt;em&gt;some property of value&lt;/em&gt;”.&lt;/p&gt;
&lt;p&gt;We can abstract over this by writing a function that will find the key-value pair with the biggest &lt;em&gt;some property of value&lt;/em&gt;:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb4&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb4-1&quot;&gt;&lt;a href=&quot;#cb4-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;qualified&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Data.List.NonEmpty&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;NE&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb4-2&quot;&gt;&lt;a href=&quot;#cb4-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb4-3&quot;&gt;&lt;a href=&quot;#cb4-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;maximumValBy&lt;/span&gt;
&lt;span id=&quot;cb4-4&quot;&gt;&lt;a href=&quot;#cb4-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;    ::&lt;/span&gt; (a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Ordring&lt;/span&gt;)  &lt;span class=&quot;co&quot;&gt;-- ^ function to compare values&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb4-5&quot;&gt;&lt;a href=&quot;#cb4-5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Map&lt;/span&gt; k a&lt;/span&gt;
&lt;span id=&quot;cb4-6&quot;&gt;&lt;a href=&quot;#cb4-6&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Maybe&lt;/span&gt; (k, a)         &lt;span class=&quot;co&quot;&gt;-- ^ biggest key-value pair, using comparator function&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb4-7&quot;&gt;&lt;a href=&quot;#cb4-7&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;maximumValBy c &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (maximumBy (c &lt;span class=&quot;ot&quot;&gt;`on`&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;snd&lt;/span&gt;)) &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; NE.nonEmpty &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; M.toList&lt;/span&gt;
&lt;span id=&quot;cb4-8&quot;&gt;&lt;a href=&quot;#cb4-8&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb4-9&quot;&gt;&lt;a href=&quot;#cb4-9&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- | Get the key-value pair with highest value&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb4-10&quot;&gt;&lt;a href=&quot;#cb4-10&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;maximumVal ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Ord&lt;/span&gt; a &lt;span class=&quot;ot&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Map&lt;/span&gt; k a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Maybe&lt;/span&gt; (k, a)&lt;/span&gt;
&lt;span id=&quot;cb4-11&quot;&gt;&lt;a href=&quot;#cb4-11&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;maximumVal &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; maximumValBy &lt;span class=&quot;fu&quot;&gt;compare&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We use &lt;code&gt;fmap (maximumBy ...) . NE.nonEmpty&lt;/code&gt; as basically a “safe maximum”, allowing us to return &lt;code&gt;Nothing&lt;/code&gt; in the case that the map was empty. This works because &lt;code&gt;NE.nonEmpty&lt;/code&gt; will return &lt;code&gt;Nothing&lt;/code&gt; if the list was empty, and &lt;code&gt;Just&lt;/code&gt; otherwise…meaning that &lt;code&gt;maximumBy&lt;/code&gt; is safe since it is never given to a non-empty list.&lt;/p&gt;
&lt;p&gt;The rest of the challenge is just querying this &lt;code&gt;Map Guard TimeCard&lt;/code&gt; using some rather finicky applications of the predicates specified by the challenge. Luckily we have our safe types to keep us from mixing up different concepts by accident.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb5&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb5-1&quot;&gt;&lt;a href=&quot;#cb5-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;eitherToMaybe ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Either&lt;/span&gt; e a &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Maybe&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&quot;cb5-2&quot;&gt;&lt;a href=&quot;#cb5-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;eitherToMaybe &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;either&lt;/span&gt; (&lt;span class=&quot;fu&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Nothing&lt;/span&gt;) &lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-3&quot;&gt;&lt;a href=&quot;#cb5-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-4&quot;&gt;&lt;a href=&quot;#cb5-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;day04a ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Map&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Time&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Action&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Maybe&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-5&quot;&gt;&lt;a href=&quot;#cb5-5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;day04a logs &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-6&quot;&gt;&lt;a href=&quot;#cb5-6&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;co&quot;&gt;-- build time cards&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-7&quot;&gt;&lt;a href=&quot;#cb5-7&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    timeCards               &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; eitherToMaybe &lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; P.parse buildTimeCards &lt;span class=&quot;st&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; (M.toList logs)&lt;/span&gt;
&lt;span id=&quot;cb5-8&quot;&gt;&lt;a href=&quot;#cb5-8&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;co&quot;&gt;-- get the worst guard/time card pair, by finding the pair with the&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-9&quot;&gt;&lt;a href=&quot;#cb5-9&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;co&quot;&gt;--   highest total minutes slept&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-10&quot;&gt;&lt;a href=&quot;#cb5-10&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    (worstGuard , timeCard) &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; maximumValBy (comparing &lt;span class=&quot;fu&quot;&gt;sum&lt;/span&gt;) timeCards&lt;/span&gt;
&lt;span id=&quot;cb5-11&quot;&gt;&lt;a href=&quot;#cb5-11&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;co&quot;&gt;-- get the minute in the time card with the highest frequency&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-12&quot;&gt;&lt;a href=&quot;#cb5-12&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    (worstMinute, _       ) &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; maximumVal timeCard&lt;/span&gt;
&lt;span id=&quot;cb5-13&quot;&gt;&lt;a href=&quot;#cb5-13&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;co&quot;&gt;-- checksum&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-14&quot;&gt;&lt;a href=&quot;#cb5-14&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; _gId worstGuard &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fromIntegral&lt;/span&gt; worstMinute&lt;/span&gt;
&lt;span id=&quot;cb5-15&quot;&gt;&lt;a href=&quot;#cb5-15&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-16&quot;&gt;&lt;a href=&quot;#cb5-16&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;day04b ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Map&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Time&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Action&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Maybe&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-17&quot;&gt;&lt;a href=&quot;#cb5-17&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;day04b logs &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-18&quot;&gt;&lt;a href=&quot;#cb5-18&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;co&quot;&gt;-- build time cards&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-19&quot;&gt;&lt;a href=&quot;#cb5-19&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    timeCards                      &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; eitherToMaybe &lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; P.parse buildTimeCards &lt;span class=&quot;st&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; (M.toList logs)&lt;/span&gt;
&lt;span id=&quot;cb5-20&quot;&gt;&lt;a href=&quot;#cb5-20&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;co&quot;&gt;-- build a map of guards to their most slept minutes&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-21&quot;&gt;&lt;a href=&quot;#cb5-21&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;kw&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; worstMinutes ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Map&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Guard&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Minute&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb5-22&quot;&gt;&lt;a href=&quot;#cb5-22&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        worstMinutes &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; M.mapMaybe maximumVal timeCards&lt;/span&gt;
&lt;span id=&quot;cb5-23&quot;&gt;&lt;a href=&quot;#cb5-23&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;co&quot;&gt;-- find the guard with the highest most-slept-minute&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-24&quot;&gt;&lt;a href=&quot;#cb5-24&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    (worstGuard, (worstMinute, _)) &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; maximumValBy (comparing &lt;span class=&quot;fu&quot;&gt;snd&lt;/span&gt;) worstMinutes&lt;/span&gt;
&lt;span id=&quot;cb5-25&quot;&gt;&lt;a href=&quot;#cb5-25&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;co&quot;&gt;-- checksum&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-26&quot;&gt;&lt;a href=&quot;#cb5-26&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; _gId worstGuard &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fromIntegral&lt;/span&gt; worstMinute&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Like I said, these are just some complicated queries, but they are a direct translation of the problem prompt. The real interesting part is the building of the time cards, I think! And not necessarily the querying part.&lt;/p&gt;
&lt;p&gt;Parsing, again, can be done by stripping the lines of spaces and using &lt;code&gt;words&lt;/code&gt; and &lt;code&gt;readMaybe&lt;/code&gt;s. We can use &lt;code&gt;packFinite :: Integer -&amp;gt; Maybe (Finite n)&lt;/code&gt; to get our hours and minutes into the &lt;code&gt;Finite&lt;/code&gt; type that &lt;code&gt;T&lt;/code&gt; expects.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb6&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb6-1&quot;&gt;&lt;a href=&quot;#cb6-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;parseLine ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Maybe&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Time&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;Action&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb6-2&quot;&gt;&lt;a href=&quot;#cb6-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;parseLine str &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-3&quot;&gt;&lt;a href=&quot;#cb6-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    [y,mo,d,h,mi] &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;traverse&lt;/span&gt; readMaybe timeStamp&lt;/span&gt;
&lt;span id=&quot;cb6-4&quot;&gt;&lt;a href=&quot;#cb6-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    t             &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;T&lt;/span&gt; y mo d &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; packFinite h &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; packFinite mi&lt;/span&gt;
&lt;span id=&quot;cb6-5&quot;&gt;&lt;a href=&quot;#cb6-5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    a             &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; rest &lt;span class=&quot;kw&quot;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-6&quot;&gt;&lt;a href=&quot;#cb6-6&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;st&quot;&gt;&amp;quot;falls&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;asleep&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;_ &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;ASleep&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-7&quot;&gt;&lt;a href=&quot;#cb6-7&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;st&quot;&gt;&amp;quot;wakes&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;up&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;_     &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;AWake&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-8&quot;&gt;&lt;a href=&quot;#cb6-8&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;st&quot;&gt;&amp;quot;Guard&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;n&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;_        &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;AShift&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;G&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; readMaybe n&lt;/span&gt;
&lt;span id=&quot;cb6-9&quot;&gt;&lt;a href=&quot;#cb6-9&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;      _                  &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Nothing&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-10&quot;&gt;&lt;a href=&quot;#cb6-10&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;fu&quot;&gt;pure&lt;/span&gt; (t, a)&lt;/span&gt;
&lt;span id=&quot;cb6-11&quot;&gt;&lt;a href=&quot;#cb6-11&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-12&quot;&gt;&lt;a href=&quot;#cb6-12&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    (timeStamp, rest) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;splitAt&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-13&quot;&gt;&lt;a href=&quot;#cb6-13&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;                      &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;words&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-14&quot;&gt;&lt;a href=&quot;#cb6-14&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;                      &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; clearOut (&lt;span class=&quot;fu&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;isAlphaNum&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb6-15&quot;&gt;&lt;a href=&quot;#cb6-15&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;                      &lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; str&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;day-4-benchmarks&quot;&gt;Day 4 Benchmarks&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt; Day 04a
benchmarking...
time                 14.35 ms   (13.79 ms .. 15.27 ms)
                     0.988 R²   (0.975 R² .. 0.998 R²)
mean                 14.96 ms   (14.60 ms .. 15.80 ms)
std dev              1.228 ms   (809.0 μs .. 1.819 ms)
variance introduced by outliers: 39% (moderately inflated)

&amp;gt;&amp;gt; Day 04b
benchmarking...
time                 14.40 ms   (13.12 ms .. 16.95 ms)
                     0.774 R²   (0.585 R² .. 0.988 R²)
mean                 14.59 ms   (13.68 ms .. 18.46 ms)
std dev              3.863 ms   (1.161 ms .. 7.851 ms)
variance introduced by outliers: 87% (severely inflated)&lt;/code&gt;&lt;/pre&gt;
</description>
      <link>https://github.com/mstksg/advent-of-code-2018/blob/master/reflections.md#day-4</link>
      <pubDate>Tue,  4 Dec 2018 01:00:00 EST</pubDate>
    </item>

    <item>
      <title>Day 3</title>
      <description>&lt;h2 id=&quot;day-3&quot;&gt;Day 3&lt;/h2&gt;
&lt;!--
This section is generated and compiled by the build script at ./Build.hs from
the file `./reflections/day03.md`.  If you want to edit this, edit
that file instead!
--&gt;
&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://adventofcode.com/2018/day/3&quot;&gt;Prompt&lt;/a&gt;&lt;/em&gt; / &lt;em&gt;&lt;a href=&quot;https://github.com/mstksg/advent-of-code-2018/blob/master/src/AOC/Challenge/Day03.hs&quot;&gt;Code&lt;/a&gt;&lt;/em&gt; / &lt;em&gt;&lt;a href=&quot;https://mstksg.github.io/advent-of-code-2018/src/AOC.Challenge.Day03.html&quot;&gt;Rendered&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Day 3 brings back one of my favorite data structures in Haskell – &lt;code&gt;Map (Int, Int)&lt;/code&gt;! It’s basically a sparse grid. It maps coordinates to values at each coordinate.&lt;/p&gt;
&lt;p&gt;We’re going to use &lt;code&gt;V2 Int&lt;/code&gt; (from &lt;em&gt;&lt;a href=&quot;https://hackage.haskell.org/package/linear&quot;&gt;linear&lt;/a&gt;&lt;/em&gt;) instead of &lt;code&gt;(Int, Int)&lt;/code&gt; (they’re the same thing), because we get to use the overloaded &lt;code&gt;+&lt;/code&gt; operator to do point-wise addition. Let’s also define a rectangle specification and claim record type to keep things clean:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb1&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb1-1&quot;&gt;&lt;a href=&quot;#cb1-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Coord&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;V2&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-2&quot;&gt;&lt;a href=&quot;#cb1-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-3&quot;&gt;&lt;a href=&quot;#cb1-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Rect&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;R&lt;/span&gt; {&lt;span class=&quot;ot&quot;&gt; rStart ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Coord&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-4&quot;&gt;&lt;a href=&quot;#cb1-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;              ,&lt;span class=&quot;ot&quot;&gt; rSize  ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Coord&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-5&quot;&gt;&lt;a href=&quot;#cb1-5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;              }&lt;/span&gt;
&lt;span id=&quot;cb1-6&quot;&gt;&lt;a href=&quot;#cb1-6&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-7&quot;&gt;&lt;a href=&quot;#cb1-7&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Claim&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;C&lt;/span&gt; {&lt;span class=&quot;ot&quot;&gt; cId   ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-8&quot;&gt;&lt;a href=&quot;#cb1-8&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;               ,&lt;span class=&quot;ot&quot;&gt; cRect ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Rect&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-9&quot;&gt;&lt;a href=&quot;#cb1-9&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;               }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, we want to make a function that, given a rectangle, produces a list of every coordinate in that rectangle. We can take advantage of &lt;code&gt;range&lt;/code&gt; from &lt;em&gt;Data.Ix&lt;/em&gt;, which enumerates all coordinates between two corners:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb2&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb2-1&quot;&gt;&lt;a href=&quot;#cb2-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;tiles ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Rect&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; [&lt;span class=&quot;dt&quot;&gt;Coord&lt;/span&gt;]&lt;/span&gt;
&lt;span id=&quot;cb2-2&quot;&gt;&lt;a href=&quot;#cb2-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;tiles (&lt;span class=&quot;dt&quot;&gt;R&lt;/span&gt; start size) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;range&lt;/span&gt; (topLeft, bottomRight)&lt;/span&gt;
&lt;span id=&quot;cb2-3&quot;&gt;&lt;a href=&quot;#cb2-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-4&quot;&gt;&lt;a href=&quot;#cb2-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    topLeft     &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; start&lt;/span&gt;
&lt;span id=&quot;cb2-5&quot;&gt;&lt;a href=&quot;#cb2-5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    bottomRight &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; start &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; size &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;          &lt;span class=&quot;co&quot;&gt;-- V2 has a Num instance&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we can stake all of the claims and lay all of the tiles down into a &lt;code&gt;Map Coord Int&lt;/code&gt;, a frequency map of coordinates that have been claimed (and how many times they have been claimed):&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb3&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb3-1&quot;&gt;&lt;a href=&quot;#cb3-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;layTiles ::&lt;/span&gt; [&lt;span class=&quot;dt&quot;&gt;Rect&lt;/span&gt;] &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Map&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Coord&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-2&quot;&gt;&lt;a href=&quot;#cb3-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;layTiles &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; freqs &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;concatMap&lt;/span&gt; tiles&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(Reusing &lt;code&gt;freqs&lt;/code&gt; from Day 2)&lt;/p&gt;
&lt;p&gt;From there, we need to count how many frequencies we observe are greater than 1. We can do that by filtering and counting how many are left.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb4&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb4-1&quot;&gt;&lt;a href=&quot;#cb4-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;qualified&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Data.Map&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;M&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb4-2&quot;&gt;&lt;a href=&quot;#cb4-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb4-3&quot;&gt;&lt;a href=&quot;#cb4-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;day03a ::&lt;/span&gt; [&lt;span class=&quot;dt&quot;&gt;Rect&lt;/span&gt;] &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb4-4&quot;&gt;&lt;a href=&quot;#cb4-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;day03a &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;filter&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; M.elems &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; layTiles&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For &lt;code&gt;day03&lt;/code&gt;, we can use &lt;code&gt;find&lt;/code&gt; to search our list of claims by id’s, &lt;code&gt;[(Int, Rect)]&lt;/code&gt; and find any claim that is completely non-overlapping.&lt;/p&gt;
&lt;p&gt;We can check if a claim is non-overlapping or not by checking our map of staked tiles and making sure that every square in the claim has exactly frequency &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb5&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb5-1&quot;&gt;&lt;a href=&quot;#cb5-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;noOverlap ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Map&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Coord&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Rect&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Bool&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-2&quot;&gt;&lt;a href=&quot;#cb5-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;noOverlap tilesClaimed r &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;all&lt;/span&gt; isAlone (tiles r)&lt;/span&gt;
&lt;span id=&quot;cb5-3&quot;&gt;&lt;a href=&quot;#cb5-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-4&quot;&gt;&lt;a href=&quot;#cb5-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    isAlone c &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; M.lookup c tilesClaimed &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And that’s our Part 2:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb6&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb6-1&quot;&gt;&lt;a href=&quot;#cb6-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;day03b ::&lt;/span&gt; [&lt;span class=&quot;dt&quot;&gt;Claim&lt;/span&gt;] &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Maybe&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-2&quot;&gt;&lt;a href=&quot;#cb6-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;day03b ts &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; cId &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; find (noOverlap stakes &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; cRect) ts&lt;/span&gt;
&lt;span id=&quot;cb6-3&quot;&gt;&lt;a href=&quot;#cb6-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb6-4&quot;&gt;&lt;a href=&quot;#cb6-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    stakes &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; layTiles (&lt;span class=&quot;fu&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;snd&lt;/span&gt; ts)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Parsing for this one is a little tricky, but we can get away with just clearing out all non-digit characters and using &lt;code&gt;words&lt;/code&gt; to split up a string into its constituent words, and &lt;code&gt;readMaybe&lt;/code&gt; to read each one.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb7&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb7-1&quot;&gt;&lt;a href=&quot;#cb7-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;parseLine ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Maybe&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Claim&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-2&quot;&gt;&lt;a href=&quot;#cb7-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;parseLine &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; mkLine&lt;/span&gt;
&lt;span id=&quot;cb7-3&quot;&gt;&lt;a href=&quot;#cb7-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;          &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; mapMaybe readMaybe&lt;/span&gt;
&lt;span id=&quot;cb7-4&quot;&gt;&lt;a href=&quot;#cb7-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;          &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;words&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-5&quot;&gt;&lt;a href=&quot;#cb7-5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;          &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;map&lt;/span&gt; onlyDigits&lt;/span&gt;
&lt;span id=&quot;cb7-6&quot;&gt;&lt;a href=&quot;#cb7-6&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-7&quot;&gt;&lt;a href=&quot;#cb7-7&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    mkLine [i,x0,y0,w,h] &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Claim&lt;/span&gt; i (&lt;span class=&quot;dt&quot;&gt;R&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;V2&lt;/span&gt; x0 y0) (&lt;span class=&quot;dt&quot;&gt;V2&lt;/span&gt; w h))&lt;/span&gt;
&lt;span id=&quot;cb7-8&quot;&gt;&lt;a href=&quot;#cb7-8&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    mkLine _             &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Nothing&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb7-9&quot;&gt;&lt;a href=&quot;#cb7-9&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    onlyDigits c&lt;/span&gt;
&lt;span id=&quot;cb7-10&quot;&gt;&lt;a href=&quot;#cb7-10&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;op&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;isDigit&lt;/span&gt; c &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; c&lt;/span&gt;
&lt;span id=&quot;cb7-11&quot;&gt;&lt;a href=&quot;#cb7-11&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;op&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;otherwise&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ch&quot;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;day-3-benchmarks&quot;&gt;Day 3 Benchmarks&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt; Day 03a
benchmarking...
time                 342.4 ms   (259.5 ms .. 381.0 ms)
                     0.993 R²   (0.982 R² .. 1.000 R²)
mean                 351.6 ms   (340.2 ms .. 362.1 ms)
std dev              12.64 ms   (7.794 ms .. 15.36 ms)
variance introduced by outliers: 19% (moderately inflated)

&amp;gt;&amp;gt; Day 03b
benchmarking...
time                 319.3 ms   (298.8 ms .. 358.2 ms)
                     0.993 R²   (0.961 R² .. 1.000 R²)
mean                 318.6 ms   (312.6 ms .. 329.1 ms)
std dev              10.84 ms   (2.646 ms .. 14.76 ms)
variance introduced by outliers: 16% (moderately inflated)&lt;/code&gt;&lt;/pre&gt;
</description>
      <link>https://github.com/mstksg/advent-of-code-2018/blob/master/reflections.md#day-3</link>
      <pubDate>Mon,  3 Dec 2018 01:00:00 EST</pubDate>
    </item>

    <item>
      <title>Day 2</title>
      <description>&lt;h2 id=&quot;day-2&quot;&gt;Day 2&lt;/h2&gt;
&lt;!--
This section is generated and compiled by the build script at ./Build.hs from
the file `./reflections/day02.md`.  If you want to edit this, edit
that file instead!
--&gt;
&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://adventofcode.com/2018/day/2&quot;&gt;Prompt&lt;/a&gt;&lt;/em&gt; / &lt;em&gt;&lt;a href=&quot;https://github.com/mstksg/advent-of-code-2018/blob/master/src/AOC/Challenge/Day02.hs&quot;&gt;Code&lt;/a&gt;&lt;/em&gt; / &lt;em&gt;&lt;a href=&quot;https://mstksg.github.io/advent-of-code-2018/src/AOC.Challenge.Day02.html&quot;&gt;Rendered&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Day 2 part 1 works out nicely in a functional paradigm because it can be seen as just building a couple of frequency tables.&lt;/p&gt;
&lt;p&gt;I often use this function to generate a frequency table of values in a list:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb1&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb1-1&quot;&gt;&lt;a href=&quot;#cb1-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;qualified&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Data.Map&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;M&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-2&quot;&gt;&lt;a href=&quot;#cb1-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-3&quot;&gt;&lt;a href=&quot;#cb1-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;freqs ::&lt;/span&gt; [a] &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Map&lt;/span&gt; a &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-4&quot;&gt;&lt;a href=&quot;#cb1-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;freqs &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; M.fromListWith (&lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;map&lt;/span&gt; (,&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Day 2 part 1 is then to:&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;Build a frequency map for chars for each line&lt;/li&gt;
&lt;li&gt;Aggregate all of the seen frequencies in each line&lt;/li&gt;
&lt;li&gt;Build a frequency map of the seen frequencies&lt;/li&gt;
&lt;li&gt;Look up how often freq 2 and freq 3 occurred, and then multiply&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So we have:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb2&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb2-1&quot;&gt;&lt;a href=&quot;#cb2-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;day02a ::&lt;/span&gt; [&lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt;] &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Maybe&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-2&quot;&gt;&lt;a href=&quot;#cb2-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;day02a &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; mulTwoThree&lt;/span&gt;
&lt;span id=&quot;cb2-3&quot;&gt;&lt;a href=&quot;#cb2-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;       &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; freqs&lt;/span&gt;
&lt;span id=&quot;cb2-4&quot;&gt;&lt;a href=&quot;#cb2-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;       &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;concatMap&lt;/span&gt; (nubOrd &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; M.elems &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; freqs)&lt;/span&gt;
&lt;span id=&quot;cb2-5&quot;&gt;&lt;a href=&quot;#cb2-5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-6&quot;&gt;&lt;a href=&quot;#cb2-6&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;mulTwoThree ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Map&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Maybe&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-7&quot;&gt;&lt;a href=&quot;#cb2-7&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;mulTwoThree mp &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; M.lookup &lt;span class=&quot;dv&quot;&gt;2&lt;/span&gt; mp &lt;span class=&quot;op&quot;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; M.lookup &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt; mp&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Part 2 for this day is pretty much the same as Part 2 for day 1, only instead of finding the first item that has already been seen, we find the first item who has any &lt;em&gt;neighbors&lt;/em&gt; who had already been seen.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb3&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb3-1&quot;&gt;&lt;a href=&quot;#cb3-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt;           &lt;span class=&quot;dt&quot;&gt;Control.Lens&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-2&quot;&gt;&lt;a href=&quot;#cb3-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;qualified&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Data.Set&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;S&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-3&quot;&gt;&lt;a href=&quot;#cb3-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-4&quot;&gt;&lt;a href=&quot;#cb3-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;firstNeighbor ::&lt;/span&gt; [&lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt;] &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Maybe&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb3-5&quot;&gt;&lt;a href=&quot;#cb3-5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;firstNeighbor &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; go S.empty&lt;/span&gt;
&lt;span id=&quot;cb3-6&quot;&gt;&lt;a href=&quot;#cb3-6&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-7&quot;&gt;&lt;a href=&quot;#cb3-7&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    go seen (x&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;xs) &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;case&lt;/span&gt; find (&lt;span class=&quot;ot&quot;&gt;`S.member`&lt;/span&gt; seen) (neighbors x) &lt;span class=&quot;kw&quot;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-8&quot;&gt;&lt;a href=&quot;#cb3-8&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt; n  &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt; (x, n)&lt;/span&gt;
&lt;span id=&quot;cb3-9&quot;&gt;&lt;a href=&quot;#cb3-9&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;dt&quot;&gt;Nothing&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; go (x &lt;span class=&quot;ot&quot;&gt;`S.insert`&lt;/span&gt; seen) xs&lt;/span&gt;
&lt;span id=&quot;cb3-10&quot;&gt;&lt;a href=&quot;#cb3-10&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    go _ [] &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Nothing&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-11&quot;&gt;&lt;a href=&quot;#cb3-11&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-12&quot;&gt;&lt;a href=&quot;#cb3-12&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;neighbors ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; [&lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt;]&lt;/span&gt;
&lt;span id=&quot;cb3-13&quot;&gt;&lt;a href=&quot;#cb3-13&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;neighbors xs &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; [ xs &lt;span class=&quot;op&quot;&gt;&amp;amp;&lt;/span&gt; ix i &lt;span class=&quot;op&quot;&gt;.~&lt;/span&gt; newChar&lt;/span&gt;
&lt;span id=&quot;cb3-14&quot;&gt;&lt;a href=&quot;#cb3-14&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;               &lt;span class=&quot;op&quot;&gt;|&lt;/span&gt; i       &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; [&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;length&lt;/span&gt; xs &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;]&lt;/span&gt;
&lt;span id=&quot;cb3-15&quot;&gt;&lt;a href=&quot;#cb3-15&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;               &lt;span class=&quot;op&quot;&gt;|&lt;/span&gt; newChar &lt;span class=&quot;ot&quot;&gt;&amp;lt;-&lt;/span&gt; [&lt;span class=&quot;ch&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;ch&quot;&gt;&amp;#39;z&amp;#39;&lt;/span&gt;]&lt;/span&gt;
&lt;span id=&quot;cb3-16&quot;&gt;&lt;a href=&quot;#cb3-16&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;               ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;firstNeighbor&lt;/code&gt; will return the first item who has a neighbor that has already been seen, along with that neighbor.&lt;/p&gt;
&lt;p&gt;The answer we need to return is the common letters between the two strings, so we can write a function to only keep common letters between two strings:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb4&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb4-1&quot;&gt;&lt;a href=&quot;#cb4-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;onlySame ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb4-2&quot;&gt;&lt;a href=&quot;#cb4-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;onlySame xs &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; catMaybes &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;zipWith&lt;/span&gt; (\x y &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; x &lt;span class=&quot;op&quot;&gt;&amp;lt;$&lt;/span&gt; guard (x &lt;span class=&quot;op&quot;&gt;==&lt;/span&gt; y)) xs&lt;/span&gt;
&lt;span id=&quot;cb4-3&quot;&gt;&lt;a href=&quot;#cb4-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb4-4&quot;&gt;&lt;a href=&quot;#cb4-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;co&quot;&gt;-- &amp;gt; onlySame &amp;quot;abcd&amp;quot; &amp;quot;abed&amp;quot; == &amp;quot;abd&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And that’s pretty much the entire pipeline:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb5&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb5-1&quot;&gt;&lt;a href=&quot;#cb5-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;day02a ::&lt;/span&gt; [&lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt;] &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Maybe&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-2&quot;&gt;&lt;a href=&quot;#cb5-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;day02a &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;fmap&lt;/span&gt; (&lt;span class=&quot;fu&quot;&gt;uncurry&lt;/span&gt; onlySame) &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; firstNeighbor&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Parsing is just &lt;code&gt;lines :: String -&amp;gt; [String]&lt;/code&gt;, which splits a string on lines.&lt;/p&gt;
&lt;h3 id=&quot;day-2-benchmarks&quot;&gt;Day 2 Benchmarks&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt; Day 02a
benchmarking...
time                 764.6 μs   (714.9 μs .. 805.5 μs)
                     0.972 R²   (0.954 R² .. 0.985 R²)
mean                 832.2 μs   (799.6 μs .. 888.5 μs)
std dev              140.8 μs   (97.40 μs .. 211.6 μs)
variance introduced by outliers: 90% (severely inflated)

* parsing and formatting times excluded

&amp;gt;&amp;gt; Day 02b
benchmarking...
time                 50.44 ms   (48.40 ms .. 52.57 ms)
                     0.994 R²   (0.987 R² .. 0.998 R²)
mean                 47.54 ms   (45.59 ms .. 49.27 ms)
std dev              3.462 ms   (2.728 ms .. 4.515 ms)
variance introduced by outliers: 22% (moderately inflated)

* parsing and formatting times excluded&lt;/code&gt;&lt;/pre&gt;
</description>
      <link>https://github.com/mstksg/advent-of-code-2018/blob/master/reflections.md#day-2</link>
      <pubDate>Sun,  2 Dec 2018 01:00:00 EST</pubDate>
    </item>

    <item>
      <title>Day 1</title>
      <description>&lt;h2 id=&quot;day-1&quot;&gt;Day 1&lt;/h2&gt;
&lt;!--
This section is generated and compiled by the build script at ./Build.hs from
the file `./reflections/day01.md`.  If you want to edit this, edit
that file instead!
--&gt;
&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://adventofcode.com/2018/day/1&quot;&gt;Prompt&lt;/a&gt;&lt;/em&gt; / &lt;em&gt;&lt;a href=&quot;https://github.com/mstksg/advent-of-code-2018/blob/master/src/AOC/Challenge/Day01.hs&quot;&gt;Code&lt;/a&gt;&lt;/em&gt; / &lt;em&gt;&lt;a href=&quot;https://mstksg.github.io/advent-of-code-2018/src/AOC.Challenge.Day01.html&quot;&gt;Rendered&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Day 1 is a pretty straightforward functional programming sort of pipeline.&lt;/p&gt;
&lt;p&gt;The first part is just a sum:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb1&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb1-1&quot;&gt;&lt;a href=&quot;#cb1-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;day01a ::&lt;/span&gt; [&lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;] &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb1-2&quot;&gt;&lt;a href=&quot;#cb1-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;day01a &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;sum&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The second part is a little tricker, but we can get a list of running sums with &lt;code&gt;scanl (+) 0&lt;/code&gt;. We need to find the first &lt;em&gt;repeated&lt;/em&gt; item in that list of running totals. We can do this using explicit recursion down the linked list:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb2&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb2-1&quot;&gt;&lt;a href=&quot;#cb2-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;qualified&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Data.Set&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;S&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-2&quot;&gt;&lt;a href=&quot;#cb2-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-3&quot;&gt;&lt;a href=&quot;#cb2-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;firstRepeated ::&lt;/span&gt; [&lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;] &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Maybe&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-4&quot;&gt;&lt;a href=&quot;#cb2-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;firstRepeated &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; go S.empty&lt;/span&gt;
&lt;span id=&quot;cb2-5&quot;&gt;&lt;a href=&quot;#cb2-5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-6&quot;&gt;&lt;a href=&quot;#cb2-6&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    go seen (x&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt;xs)&lt;/span&gt;
&lt;span id=&quot;cb2-7&quot;&gt;&lt;a href=&quot;#cb2-7&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;op&quot;&gt;|&lt;/span&gt; x &lt;span class=&quot;ot&quot;&gt;`S.member`&lt;/span&gt; seen &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt; x                      &lt;span class=&quot;co&quot;&gt;-- this is it, chief&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb2-8&quot;&gt;&lt;a href=&quot;#cb2-8&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;op&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;otherwise&lt;/span&gt;         &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; go (x &lt;span class=&quot;ot&quot;&gt;`S.insert`&lt;/span&gt; seen) xs   &lt;span class=&quot;co&quot;&gt;-- we have to look furhter&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And so then we have our full pipeline. We do need to remember to loop the input list infinitely by using &lt;code&gt;cycle&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb3&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb3-1&quot;&gt;&lt;a href=&quot;#cb3-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;day01b ::&lt;/span&gt; [&lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;] &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Maybe&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb3-2&quot;&gt;&lt;a href=&quot;#cb3-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;day01b &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; firstRepeated &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;scanl&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;) &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;cycle&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We do need a parser, and we can leverage &lt;code&gt;readMaybe&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb4&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb4-1&quot;&gt;&lt;a href=&quot;#cb4-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;parseItem ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Maybe&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb4-2&quot;&gt;&lt;a href=&quot;#cb4-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;parseItem &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; readMaybe &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;filter&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;/=&lt;/span&gt; &lt;span class=&quot;ch&quot;&gt;&amp;#39;+&amp;#39;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb4-3&quot;&gt;&lt;a href=&quot;#cb4-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb4-4&quot;&gt;&lt;a href=&quot;#cb4-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;parseList ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Maybe&lt;/span&gt; [&lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;]&lt;/span&gt;
&lt;span id=&quot;cb4-5&quot;&gt;&lt;a href=&quot;#cb4-5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;parseList &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;traverse&lt;/span&gt; parseItem &lt;span class=&quot;op&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;lines&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;One small extra bonus note — as a Haskeller, we are always taught to be afraid of explicit recursion. So, the implementation of &lt;code&gt;firstRepeated&lt;/code&gt; is a little unsettling. We can write it using a catamorphism instead, from the &lt;em&gt;recursion-schemes&lt;/em&gt; library:&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb5&quot;&gt;&lt;pre class=&quot;sourceCode haskell&quot;&gt;&lt;code class=&quot;sourceCode haskell&quot;&gt;&lt;span id=&quot;cb5-1&quot;&gt;&lt;a href=&quot;#cb5-1&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;firstRepeated ::&lt;/span&gt; [&lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;] &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Maybe&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-2&quot;&gt;&lt;a href=&quot;#cb5-2&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;firstRepeated xs &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; cata go xs S.empty&lt;/span&gt;
&lt;span id=&quot;cb5-3&quot;&gt;&lt;a href=&quot;#cb5-3&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kw&quot;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-4&quot;&gt;&lt;a href=&quot;#cb5-4&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;&lt;span class=&quot;ot&quot;&gt;    go  ::&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;ListF&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt; (&lt;span class=&quot;dt&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Maybe&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb5-5&quot;&gt;&lt;a href=&quot;#cb5-5&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-6&quot;&gt;&lt;a href=&quot;#cb5-6&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;        &lt;span class=&quot;ot&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Maybe&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-7&quot;&gt;&lt;a href=&quot;#cb5-7&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    go &lt;span class=&quot;dt&quot;&gt;Nil&lt;/span&gt; _              &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Nothing&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-8&quot;&gt;&lt;a href=&quot;#cb5-8&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;    go (&lt;span class=&quot;dt&quot;&gt;Cons&lt;/span&gt; x searchRest) seen&lt;/span&gt;
&lt;span id=&quot;cb5-9&quot;&gt;&lt;a href=&quot;#cb5-9&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;op&quot;&gt;|&lt;/span&gt; x &lt;span class=&quot;ot&quot;&gt;`S.member`&lt;/span&gt; seen &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;Just&lt;/span&gt; x                          &lt;span class=&quot;co&quot;&gt;-- this is it, chief&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb5-10&quot;&gt;&lt;a href=&quot;#cb5-10&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;      &lt;span class=&quot;op&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;otherwise&lt;/span&gt;         &lt;span class=&quot;ot&quot;&gt;=&lt;/span&gt; searchRest (x &lt;span class=&quot;ot&quot;&gt;`S.insert`&lt;/span&gt; seen)  &lt;span class=&quot;co&quot;&gt;-- we have to look further&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;cata&lt;/code&gt; wraps up a very common sort of recursion, so we can safely write our &lt;code&gt;firstRepeated&lt;/code&gt; as a non-recursive function.&lt;/p&gt;
&lt;h3 id=&quot;day-1-benchmarks&quot;&gt;Day 1 Benchmarks&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt; Day 01a
benchmarking...
time                 1.761 μs   (1.760 μs .. 1.762 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 1.759 μs   (1.758 μs .. 1.760 μs)
std dev              3.371 ns   (2.754 ns .. 4.710 ns)

* parsing and formatting times excluded

&amp;gt;&amp;gt; Day 01b
benchmarking...
time                 109.6 ms   (105.4 ms .. 113.5 ms)
                     0.998 R²   (0.995 R² .. 1.000 R²)
mean                 107.2 ms   (105.7 ms .. 108.6 ms)
std dev              2.580 ms   (1.896 ms .. 3.501 ms)

* parsing and formatting times excluded&lt;/code&gt;&lt;/pre&gt;
</description>
      <link>https://github.com/mstksg/advent-of-code-2018/blob/master/reflections.md#day-1</link>
      <pubDate>Sat,  1 Dec 2018 01:00:00 EST</pubDate>
    </item>

  </channel>
</rss>
